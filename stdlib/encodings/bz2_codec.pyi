import codecs
from _typeshed import Incomplete

def bz2_encode(input, errors: str = 'strict'): ...
def bz2_decode(input, errors: str = 'strict'): ...

class Codec(codecs.Codec):
    def encode(self, input, errors: str = 'strict'): ...
    def decode(self, input, errors: str = 'strict'): ...

class IncrementalEncoder(codecs.IncrementalEncoder):
    errors: Incomplete
    compressobj: Incomplete
    def __init__(self, errors: str = 'strict') -> None: ...
    def encode(self, input, final: bool = False): ...
    def reset(self) -> None: ...

class IncrementalDecoder(codecs.IncrementalDecoder):
    errors: Incomplete
    decompressobj: Incomplete
    def __init__(self, errors: str = 'strict') -> None: ...
    def decode(self, input, final: bool = False): ...
    def reset(self) -> None: ...

class StreamWriter(Codec, codecs.StreamWriter):
    charbuffertype = bytes

class StreamReader(Codec, codecs.StreamReader):
    charbuffertype = bytes

def getregentry(): ...
