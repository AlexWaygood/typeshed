import codecs
from _typeshed import Incomplete

class Codec(codecs.Codec):
    encode: Incomplete
    decode: Incomplete

class IncrementalEncoder(codecs.IncrementalEncoder):
    mapping: Incomplete
    def __init__(self, errors: str = "strict", mapping: Incomplete | None = None) -> None: ...
    def encode(self, input: str, final: bool = False) -> bytes: ...

class IncrementalDecoder(codecs.IncrementalDecoder):
    mapping: Incomplete
    def __init__(self, errors: str = "strict", mapping: Incomplete | None = None) -> None: ...
    def decode(self, input, final: bool = False) -> str: ...

class StreamWriter(Codec, codecs.StreamWriter):
    mapping: Incomplete
    def __init__(self, stream, errors: str = "strict", mapping: Incomplete | None = None) -> None: ...
    def encode(self, input, errors: str = "strict"): ...

class StreamReader(Codec, codecs.StreamReader):
    mapping: Incomplete
    def __init__(self, stream, errors: str = "strict", mapping: Incomplete | None = None) -> None: ...
    def decode(self, input, errors: str = "strict"): ...

def getregentry() -> codecs.CodecInfo: ...
