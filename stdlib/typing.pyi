import abc  # noqa: F401
import collections  # noqa: F401

Any = object()

class TypeVar: ...
class _SpecialForm: ...

_F = TypeVar("_F", bound=Callable[..., Any])
_T = TypeVar("_T")

def overload(func: _F) -> _F: ...

Generic: _SpecialForm
Protocol: _SpecialForm
Callable: _SpecialForm
Literal: _SpecialForm
TypeAlias: _SpecialForm

_KT = TypeVar("_KT")  # Key type.
_VT = TypeVar("_VT")  # Value type.
_T_co = TypeVar("_T_co", covariant=True)  # Any type covariant containers.
_KT_co = TypeVar("_KT_co", covariant=True)  # Key type covariant containers.
_VT_co = TypeVar("_VT_co", covariant=True)  # Value type covariant containers.

class _Alias:
    def __getitem__(self, typeargs: Any) -> Any: ...

AnyStr = TypeVar("AnyStr", str, bytes)  # noqa: Y001

class Sized(Protocol):
    def __len__(self) -> int: ...

class Iterable(Protocol[_T_co]):
    def __iter__(self) -> Iterator[_T_co]: ...

class Iterator(Iterable[_T_co], Protocol[_T_co]):
    def __next__(self) -> _T_co: ...
    def __iter__(self) -> Iterator[_T_co]: ...

_YieldT_co = TypeVar("_YieldT_co", covariant=True)
_SendT_contra = TypeVar("_SendT_contra", contravariant=True)
_ReturnT_co = TypeVar("_ReturnT_co", covariant=True)

class Generator(Iterator[_YieldT_co], Generic[_YieldT_co, _SendT_contra, _ReturnT_co]):
    def __next__(self) -> _YieldT_co: ...
    def send(self, __value: _SendT_contra) -> _YieldT_co: ...
    def close(self) -> None: ...
    def __iter__(self) -> Generator[_YieldT_co, _SendT_contra, _ReturnT_co]: ...

class Collection(Iterable[_T_co], Protocol[_T_co]): ...
class Sequence(Collection[_T_co]): ...
class MutableSequence(Sequence[_T]): ...
class AbstractSet(Collection[_T_co]): ...
class MappingView(Sized): ...
class ItemsView(MappingView, AbstractSet[tuple[_KT_co, _VT_co]]): ...
class KeysView(MappingView, AbstractSet[_KT_co]): ...
class ValuesView(MappingView, Collection[_VT_co]): ...
class Mapping(Collection[_KT], Generic[_KT, _VT_co]): ...
class MutableMapping(Mapping[_KT, _VT]): ...
