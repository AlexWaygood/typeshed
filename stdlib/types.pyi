from collections.abc import MutableSequence
from typing import Any, Protocol
from typing_extensions import Self

from machinery import ModuleSpec

class _LoaderProtocol(Protocol):
    def load_module(self, __fullname: str) -> ModuleType: ...

class ModuleType:
    __name__: str
    __file__: str | None
    @property
    def __dict__(self) -> dict[str, Any]: ...  # type: ignore[override]
    __loader__: _LoaderProtocol | None
    __package__: str | None
    __path__: MutableSequence[str]
    __spec__: ModuleSpec | None
    def __init__(self, name: str, doc: str | None = ...) -> None: ...
    # __getattr__ doesn't exist at runtime,
    # but having it here in typeshed makes dynamic imports
    # using `builtins.__import__` or `importlib.import_module` less painful
    def __getattr__(self, name: str) -> Any: ...

class GenericAlias:
    @property
    def __origin__(self) -> type: ...
    @property
    def __args__(self) -> tuple[Any, ...]: ...
    @property
    def __parameters__(self) -> tuple[Any, ...]: ...
    def __new__(cls, origin: type, args: Any) -> Self: ...
    def __getitem__(self, __typeargs: Any) -> GenericAlias: ...
    def __eq__(self, __value: object) -> bool: ...
    def __hash__(self) -> int: ...

class UnionType:
    @property
    def __args__(self) -> tuple[Any, ...]: ...
    def __or__(self, __value: Any) -> UnionType: ...
    def __ror__(self, __value: Any) -> UnionType: ...
    def __eq__(self, __value: object) -> bool: ...
    def __hash__(self) -> int: ...

def get_original_bases(t: type) -> tuple[type, ...]: ...
