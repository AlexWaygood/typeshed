import importlib.readers
import types
from typing import Callable, MutableSequence, Sequence
from typing_extensions import Literal

class ModuleSpec: ...

class BuiltinImporter:
    @classmethod
    def find_spec(
        cls, fullname: str, path: Sequence[str] | None = None, target: types.ModuleType | None = None
    ) -> ModuleSpec | None: ...
    # InspectLoader
    @classmethod
    def is_package(cls, fullname: str) -> bool: ...
    @classmethod
    def load_module(cls, fullname: str) -> types.ModuleType: ...
    @classmethod
    def get_code(cls, fullname: str) -> None: ...
    @classmethod
    def get_source(cls, fullname: str) -> None: ...
    @staticmethod
    def create_module(spec: ModuleSpec) -> types.ModuleType | None: ...
    @staticmethod
    def exec_module(module: types.ModuleType) -> None: ...

class FrozenImporter:
    @classmethod
    def find_spec(
        cls, fullname: str, path: Sequence[str] | None = None, target: types.ModuleType | None = None
    ) -> ModuleSpec | None: ...
    # InspectLoader
    @classmethod
    def is_package(cls, fullname: str) -> bool: ...
    @classmethod
    def load_module(cls, fullname: str) -> types.ModuleType: ...
    @classmethod
    def get_code(cls, fullname: str) -> None: ...
    @classmethod
    def get_source(cls, fullname: str) -> None: ...
    @staticmethod
    def create_module(spec: ModuleSpec) -> types.ModuleType | None: ...
    @staticmethod
    def exec_module(module: types.ModuleType) -> None: ...

class WindowsRegistryFinder:
    @classmethod
    def find_spec(
        cls, fullname: str, path: Sequence[str] | None = None, target: types.ModuleType | None = None
    ) -> ModuleSpec | None: ...

class FileFinder: ...
class SourcelessFileLoader: ...

class ExtensionFileLoader:
    def __init__(self, name: str, path: str) -> None: ...
    def get_filename(self, name: str | None = None) -> str: ...
    def get_source(self, fullname: str) -> None: ...
    def create_module(self, spec: ModuleSpec) -> types.ModuleType: ...
    def exec_module(self, module: types.ModuleType) -> None: ...
    def get_code(self, fullname: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class NamespaceLoader:
    def __init__(
        self, name: str, path: MutableSequence[str], path_finder: Callable[[str, tuple[str, ...]], ModuleSpec]
    ) -> None: ...
    def is_package(self, fullname: str) -> Literal[True]: ...
    def get_source(self, fullname: str) -> Literal[""]: ...
    def get_code(self, fullname: str) -> types.CodeType: ...
    def get_resource_reader(self, module: types.ModuleType) -> importlib.readers.NamespaceReader: ...
