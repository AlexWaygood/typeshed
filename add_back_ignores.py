from pathlib import WindowsPath

{
    WindowsPath("stdlib/argparse.pyi"): {
        165: "    def parse_args(self, args: Sequence[str] | None = None, namespace: None = None) -> Namespace: ...  # type: ignore[misc]"
    },
    WindowsPath("stdlib/array.pyi"): {
        48: "        def index(self, __v: _T) -> int: ...  # type: ignore[override]",
        66: "    @overload  # type: ignore[override]",
        74: "    def __iadd__(self, __x: array[_T]) -> Self: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/builtins.pyi"): {
        149: "    def __dict__(self) -> types.MappingProxyType[str, Any]: ...  # type: ignore[override]",
        420: "    def capitalize(self) -> str: ...  # type: ignore[misc]",
        424: "    def casefold(self) -> str: ...  # type: ignore[misc]",
        428: '    def center(self, __width: SupportsIndex, __fillchar: str = " ") -> str: ...  # type: ignore[misc]',
        438: "        def expandtabs(self, tabsize: SupportsIndex = 8) -> str: ...  # type: ignore[misc]",
        443: "        def expandtabs(self, tabsize: int = 8) -> str: ...  # type: ignore[misc]",
        449: "    def format(self, *args: object, **kwargs: object) -> str: ...  # type: ignore[misc]",
        467: "    def join(self, __iterable: Iterable[str]) -> str: ...  # type: ignore[misc]",
        471: '    def ljust(self, __width: SupportsIndex, __fillchar: str = " ") -> str: ...  # type: ignore[misc]',
        475: "    def lower(self) -> str: ...  # type: ignore[misc]",
        479: "    def lstrip(self, __chars: str | None = None) -> str: ...  # type: ignore[misc]",
        483: "    def partition(self, __sep: str) -> tuple[str, str, str]: ...  # type: ignore[misc]",
        489: "    def replace(self, __old: str, __new: str, __count: SupportsIndex = -1) -> str: ...  # type: ignore[misc]",
        494: "        def removeprefix(self, __prefix: str) -> str: ...  # type: ignore[misc]",
        498: "        def removesuffix(self, __suffix: str) -> str: ...  # type: ignore[misc]",
        505: '    def rjust(self, __width: SupportsIndex, __fillchar: str = " ") -> str: ...  # type: ignore[misc]',
        509: "    def rpartition(self, __sep: str) -> tuple[str, str, str]: ...  # type: ignore[misc]",
        513: "    def rsplit(self, sep: str | None = None, maxsplit: SupportsIndex = -1) -> list[str]: ...  # type: ignore[misc]",
        517: "    def rstrip(self, __chars: str | None = None) -> str: ...  # type: ignore[misc]",
        521: "    def split(self, sep: str | None = None, maxsplit: SupportsIndex = -1) -> list[str]: ...  # type: ignore[misc]",
        525: "    def splitlines(self, keepends: bool = False) -> list[str]: ...  # type: ignore[misc]",
        532: "    def strip(self, __chars: str | None = None) -> str: ...  # type: ignore[misc]",
        536: "    def swapcase(self) -> str: ...  # type: ignore[misc]",
        540: "    def title(self) -> str: ...  # type: ignore[misc]",
        545: "    def upper(self) -> str: ...  # type: ignore[misc]",
        549: "    def zfill(self, __width: SupportsIndex) -> str: ...  # type: ignore[misc]",
        562: "    def __add__(self, __s: str) -> str: ...  # type: ignore[misc]",
        564: "    def __contains__(self, __o: str) -> bool: ...  # type: ignore[override]",
        572: "    def __iter__(self) -> Iterator[str]: ...  # type: ignore[misc]",
        579: "    def __mod__(self, __x: Any) -> str: ...  # type: ignore[misc]",
        583: "    def __mul__(self, __n: SupportsIndex) -> str: ...  # type: ignore[misc]",
        588: "    def __rmul__(self, __n: SupportsIndex) -> str: ...  # type: ignore[misc]",
        683: "    def __contains__(self, __o: SupportsIndex | ReadableBuffer) -> bool: ...  # type: ignore[override]",
        783: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        795: "    def __iadd__(self, __s: ReadableBuffer) -> Self: ...  # type: ignore[override]",
        801: "    def __contains__(self, __o: SupportsIndex | ReadableBuffer) -> bool: ...  # type: ignore[override]",
        913: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        990: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        1005: "    def __iadd__(self, __x: Iterable[_T]) -> Self: ...  # type: ignore[misc]",
        1067: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        1073: "        @overload  # type: ignore[misc]",
        1104: "    def __ior__(self, __s: AbstractSet[_T]) -> Self: ...  # type: ignore[override,misc]",
        1108: "    def __ixor__(self, __s: AbstractSet[_T]) -> Self: ...  # type: ignore[override,misc]",
        1113: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        1164: "    def index(self, __value: int) -> int: ...  # type: ignore[override]",
        1194: "class _NotImplementedType(Any):  # type: ignore[misc]",
        1197: "    __call__: NotImplemented  # type: ignore[valid-type]  # pyright: ignore[reportGeneralTypeIssues]",
        1615: "    def pow(base: int, exp: Literal[0], mod: None = None) -> Literal[1]: ...  # type: ignore[misc]",
        1617: "    def pow(base: int, exp: _PositiveInteger, mod: None = None) -> int: ...  # type: ignore[misc]",
        1619: "    def pow(base: int, exp: _NegativeInteger, mod: None = None) -> float: ...  # type: ignore[misc]",
        1652: "    def pow(__base: int, __exp: Literal[0], __mod: None = None) -> Literal[1]: ...  # type: ignore[misc]",
        1654: "    def pow(__base: int, __exp: _PositiveInteger, __mod: None = None) -> int: ...  # type: ignore[misc]",
        1656: "    def pow(__base: int, __exp: _NegativeInteger, __mod: None = None) -> float: ...  # type: ignore[misc]",
        1731: "    def sum(__iterable: Iterable[bool | _LiteralInteger], start: int = 0) -> int: ...  # type: ignore[misc]",
        1735: "    def sum(__iterable: Iterable[bool | _LiteralInteger], __start: int = 0) -> int: ...  # type: ignore[misc]",
        1752: "def vars(__object: type) -> types.MappingProxyType[str, Any]: ...  # type: ignore[misc]",
        2057: "        @overload  # type: ignore[override]",
        2063: "        @overload  # type: ignore[override]",
    },
    WindowsPath("stdlib/bz2.pyi"): {
        124: "    def readline(self, size: SupportsIndex = -1) -> bytes: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/codecs.pyi"): {
        240: "    def write(self, data: str) -> None: ...  # type: ignore[override]",
        243: "    def seek(self, offset: int, whence: int = 0) -> None: ...  # type: ignore[override]",
        274: "    def write(self, data: bytes) -> None: ...  # type: ignore[override]",
        280: "    def seek(self, offset: int, whence: int = 0) -> None: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/configparser.pyi"): {
        160: "    @overload  # type: ignore[override]",
        178: "    @overload  # type: ignore[override]",
        198: "    def get(  # type: ignore[override]",
    },
    WindowsPath("stdlib/datetime.pyi"): {
        304: "    def __le__(self, __other: datetime) -> bool: ...  # type: ignore[override]",
        305: "    def __lt__(self, __other: datetime) -> bool: ...  # type: ignore[override]",
        306: "    def __ge__(self, __other: datetime) -> bool: ...  # type: ignore[override]",
        307: "    def __gt__(self, __other: datetime) -> bool: ...  # type: ignore[override]",
        309: "        @overload  # type: ignore[override]",
        317: "        @overload  # type: ignore[override]",
    },
    WindowsPath("stdlib/difflib.pyi"): {
        61: "def get_close_matches(word: AnyStr, possibilities: Iterable[AnyStr], n: int = 3, cutoff: float = 0.6) -> list[AnyStr]: ...  # type: ignore[misc]"
    },
    WindowsPath("stdlib/enum.pyi"): {
        70: "        @overload  # type: ignore[override]",
        101: "        def __prepare__(metacls, cls: str, bases: tuple[type, ...], **kwds: Any) -> _EnumDict: ...  # type: ignore[override]",
        104: "        def __prepare__(metacls, cls: str, bases: tuple[type, ...]) -> _EnumDict: ...  # type: ignore[override]",
        116: "    @overload  # type: ignore[override]",
        210: "    _name_: str | None  # type: ignore[assignment]",
        213: "    def name(self) -> str | None: ...  # type: ignore[override]",
        231: "    class IntFlag(int, ReprEnum, Flag, boundary=KEEP):  # type: ignore[misc]  # complaints about incompatible bases",
        241: "    class IntFlag(int, Flag):  # type: ignore[misc]  # complaints about incompatible bases",
    },
    WindowsPath("stdlib/gettext.pyi"): {60: "def find(  # type: ignore[misc]"},
    WindowsPath("stdlib/inspect.pyi"): {
        487: "        index: int | None  # type: ignore[assignment]",
        508: "        index: int | None  # type: ignore[assignment]",
        530: "        index: int | None  # type: ignore[assignment]",
        538: "        index: int | None  # type: ignore[assignment]",
    },
    WindowsPath("stdlib/io.pyi"): {
        94: "    name: FileDescriptorOrPath  # type: ignore[assignment]",
        137: "    def __iter__(self) -> Iterator[str]: ...  # type: ignore[override]",
        138: "    def __next__(self) -> str: ...  # type: ignore[override]",
        141: "    def writelines(self, __lines: Iterable[str]) -> None: ...  # type: ignore[override]",
        142: "    def readline(self, __size: int = ...) -> str: ...  # type: ignore[override]",
        143: "    def readlines(self, __hint: int = -1) -> list[str]: ...  # type: ignore[override]",
        175: "    def __iter__(self) -> Iterator[str]: ...  # type: ignore[override]",
        176: "    def __next__(self) -> str: ...  # type: ignore[override]",
        177: "    def writelines(self, __lines: Iterable[str]) -> None: ...  # type: ignore[override]",
        178: "    def readline(self, __size: int = -1) -> str: ...  # type: ignore[override]",
        179: "    def readlines(self, __hint: int = -1) -> list[str]: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/math.pyi"): {
        124: "    def prod(__iterable: Iterable[SupportsIndex], *, start: SupportsIndex = 1) -> int: ...  # type: ignore[misc]"
    },
    WindowsPath("stdlib/pydoc.pyi"): {
        133: "    def docroutine(  # type: ignore[override]",
        143: "    def docproperty(self, object: object, name: str | None = None, mod: str | None = None, cl: Any | None = None) -> str: ...  # type: ignore[override]",
        145: "    def docdata(self, object: object, name: str | None = None, mod: Any | None = None, cl: Any | None = None) -> str: ...  # type: ignore[override]",
        164: "    def docmodule(self, object: object, name: str | None = None, mod: Any | None = None) -> str: ...  # type: ignore[override]",
        167: "    def docroutine(self, object: object, name: str | None = None, mod: str | None = None, cl: Any | None = None) -> str: ...  # type: ignore[override]",
        168: "    def docproperty(self, object: object, name: str | None = None, mod: Any | None = None, cl: Any | None = None) -> str: ...  # type: ignore[override]",
        169: "    def docdata(self, object: object, name: str | None = None, mod: str | None = None, cl: Any | None = None) -> str: ...  # type: ignore[override]",
        170: "    def docother(  # type: ignore[override]",
    },
    WindowsPath("stdlib/random.pyi"): {
        46: "        def seed(self, a: int | float | str | bytes | bytearray | None = None, version: int = 2) -> None: ...  # type: ignore[override]  # noqa: Y041"
    },
    WindowsPath("stdlib/re.pyi"): {
        69: "    def expand(self: Match[bytes], template: ReadableBuffer) -> bytes: ...  # type: ignore[misc]",
        119: "    def search(self: Pattern[bytes], string: ReadableBuffer, pos: int = 0, endpos: int = sys.maxsize) -> Match[bytes] | None: ...  # type: ignore[misc]",
        125: "    def match(self: Pattern[bytes], string: ReadableBuffer, pos: int = 0, endpos: int = sys.maxsize) -> Match[bytes] | None: ...  # type: ignore[misc]",
        131: "    def fullmatch(self: Pattern[bytes], string: ReadableBuffer, pos: int = 0, endpos: int = sys.maxsize) -> Match[bytes] | None: ...  # type: ignore[misc]",
        150: "    def finditer(self: Pattern[bytes], string: ReadableBuffer, pos: int = 0, endpos: int = sys.maxsize) -> Iterator[Match[bytes]]: ...  # type: ignore[misc]",
        156: "    def sub(  # type: ignore[misc]",
        167: "    def subn(  # type: ignore[misc]",
    },
    WindowsPath("stdlib/shelve.pyi"): {24: "    def __contains__(self, key: str) -> bool: ...  # type: ignore[override]"},
    WindowsPath("stdlib/smtpd.pyi"): {
        49: "    def push(self, msg: str) -> None: ...  # type: ignore[override]",
        86: "    def process_message(self, peer: _Address, mailfrom: str, rcpttos: list[str], data: bytes | str) -> str | None: ...  # type: ignore[override]",
        90: "        def process_message(self, peer: _Address, mailfrom: str, rcpttos: list[str], data: bytes | str) -> str | None: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/socket.pyi"): {
        666: "    def makefile(  # type: ignore[misc]",
        727: "    def family(self) -> AddressFamily: ...  # type: ignore[override]",
        729: "    def type(self) -> SocketKind: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/socketserver.pyi"): {
        72: "    server_address: _AfInetAddress  # type: ignore[assignment]",
        83: "    def get_request(self) -> tuple[tuple[bytes, _socket], _RetAddress]: ...  # type: ignore[override]",
        87: "        server_address: _AfUnixAddress  # type: ignore[assignment]",
        96: "        server_address: _AfUnixAddress  # type: ignore[assignment]",
    },
    WindowsPath("stdlib/tempfile.pyi"): {
        389: "    def readline(self, __limit: int | None = ...) -> AnyStr: ...  # type: ignore[override]",
        390: "    def readlines(self, __hint: int = ...) -> list[AnyStr]: ...  # type: ignore[override]",
        393: "    def truncate(self, size: int | None = None) -> None: ...  # type: ignore[override]",
        395: "    def writelines(self, iterable: Iterable[AnyStr]) -> None: ...  # type: ignore[override]",
        396: "    def __iter__(self) -> Iterator[AnyStr]: ...  # type: ignore[override]",
        401: "    def __next__(self) -> AnyStr: ...  # type: ignore[override]",
        445: "def mkstemp(  # type: ignore[misc]",
        455: "def mkdtemp(suffix: str | None = None, prefix: str | None = None, dir: StrPath | None = None) -> str: ...  # type: ignore[misc]",
    },
    WindowsPath("stdlib/tracemalloc.pyi"): {
        96: "    def __contains__(self, frame: Frame) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/turtle.pyi"): {
        145: "    def __add__(self, other: tuple[float, float]) -> Vec2D: ...  # type: ignore[override]",
        146: "    @overload  # type: ignore[override]",
        150: "    def __rmul__(self, other: float) -> Vec2D: ...  # type: ignore[override]",
        157: "class ScrolledCanvas(Canvas, Frame):  # type: ignore[misc]",
        328: "    def pen(self) -> _PenState: ...  # type: ignore[misc]",
        374: "    def shapesize(self) -> tuple[float, float, float]: ...  # type: ignore[misc]",
        385: "    def shapetransform(self) -> tuple[float, float, float, float]: ...  # type: ignore[misc]",
        607: "def pen() -> _PenState: ...  # type: ignore[misc]",
        643: "def shapesize() -> tuple[float, float, float]: ...  # type: ignore[misc]",
        653: "def shapetransform() -> tuple[float, float, float, float]: ...  # type: ignore[misc]",
    },
    WindowsPath("stdlib/types.pyi"): {
        73: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        307: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        324: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        337: "    def __dict__(self) -> dict[str, Any]: ...  # type: ignore[override]",
        575: "def coroutine(func: Callable[_P, Generator[Any, Any, _R]]) -> Callable[_P, Awaitable[_R]]: ...  # type: ignore[misc]",
    },
    WindowsPath("stdlib/typing.pyi"): {
        256: "def no_type_check_decorator(decorator: Callable[_P, _T]) -> Callable[_P, _T]: ...  # type: ignore[misc]",
        529: "    def __ior__(self, it: AbstractSet[_T]) -> typing_extensions.Self: ...  # type: ignore[override,misc]",
        531: "    def __ixor__(self, it: AbstractSet[_T]) -> typing_extensions.Self: ...  # type: ignore[override,misc]",
    },
    WindowsPath("stdlib/weakref.pyi"): {
        67: "    def keys(self) -> Iterator[_KT]: ...  # type: ignore[override]",
        68: "    def values(self) -> Iterator[_VT]: ...  # type: ignore[override]",
        69: "    def items(self) -> Iterator[tuple[_KT, _VT]]: ...  # type: ignore[override]",
        72: "    def setdefault(self, key: _KT, default: _VT) -> _VT: ...  # type: ignore[override]",
        81: "        @overload  # type: ignore[misc]",
        107: "    def keys(self) -> Iterator[_KT]: ...  # type: ignore[override]",
        108: "    def values(self) -> Iterator[_VT]: ...  # type: ignore[override]",
        109: "    def items(self) -> Iterator[tuple[_KT, _VT]]: ...  # type: ignore[override]",
        124: "        @overload  # type: ignore[misc]",
    },
    WindowsPath("stdlib/webbrowser.pyi"): {
        34: "    def open(self, url: str, new: Literal[0, 1, 2] = 0, autoraise: bool = True) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/zipfile.pyi"): {
        86: "    def readline(self, limit: int = -1) -> bytes: ...  # type: ignore[override]",
        88: "    def read1(self, n: int | None) -> bytes: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/_codecs.pyi"): {
        49: 'def encode(obj: str, encoding: _StrToStrEncoding, errors: str = "strict") -> str: ...  # type: ignore[misc]',
        53: 'def decode(obj: ReadableBuffer, encoding: _BytesToBytesEncoding, errors: str = "strict") -> bytes: ...  # type: ignore[misc]',
    },
    WindowsPath("stdlib/_decimal.pyi"): {210: "    __hash__: ClassVar[None]  # type: ignore[assignment]"},
    WindowsPath("stdlib/_dummy_thread.pyi"): {24: "    def release(self) -> None: ...  # type: ignore[override]"},
    WindowsPath("stdlib/_msi.pyi"): {
        11: "        __new__: None  # type: ignore[assignment]",
        12: "        __init__: None  # type: ignore[assignment]",
        21: "        __new__: None  # type: ignore[assignment]",
        22: "        __init__: None  # type: ignore[assignment]",
        31: "        __new__: None  # type: ignore[assignment]",
        32: "        __init__: None  # type: ignore[assignment]",
        44: "        __new__: None  # type: ignore[assignment]",
        45: "        __init__: None  # type: ignore[assignment]",
    },
    WindowsPath("stdlib/_tkinter.pyi"): {23: "    __hash__: ClassVar[None]  # type: ignore[assignment]"},
    WindowsPath("stdlib/_weakrefset.pyi"): {
        26: "    def __ior__(self, other: Iterable[_T]) -> Self: ...  # type: ignore[override,misc]",
        45: "    def __ixor__(self, other: Iterable[_T]) -> Self: ...  # type: ignore[override,misc]",
    },
    WindowsPath("stdlib/asyncio/base_events.pyi"): {341: "        async def create_datagram_endpoint(  # type: ignore[override]"},
    WindowsPath("stdlib/asyncio/base_subprocess.pyi"): {
        45: "    def get_pid(self) -> int | None: ...  # type: ignore[override]",
        46: "    def get_pipe_transport(self, fd: int) -> _File: ...  # type: ignore[override]",
        48: "    def send_signal(self, signal: int) -> None: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/asyncio/protocols.pyi"): {
        22: "    def connection_made(self, transport: transports.DatagramTransport) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/asyncio/tasks.pyi"): {
        61: "def ensure_future(coro_or_future: _FT, *, loop: AbstractEventLoop | None = None) -> _FT: ...  # type: ignore[misc]",
        74: "    def gather(__coro_or_future1: _FutureLike[_T1], *, return_exceptions: Literal[False] = False) -> Future[tuple[_T1]]: ...  # type: ignore[misc]",
        76: "    def gather(  # type: ignore[misc]",
        80: "    def gather(  # type: ignore[misc]",
        88: "    def gather(  # type: ignore[misc]",
        97: "    def gather(  # type: ignore[misc]",
        107: "    def gather(__coro_or_future1: _FutureLike[_T1], *, return_exceptions: bool) -> Future[tuple[_T1 | BaseException]]: ...  # type: ignore[misc]",
        109: "    def gather(  # type: ignore[misc]",
        113: "    def gather(  # type: ignore[misc]",
        121: "    def gather(  # type: ignore[misc]",
        130: "    def gather(  # type: ignore[misc]",
        142: "    def gather(*coros_or_futures: _FutureLike[Any], return_exceptions: bool = False) -> Future[list[Any]]: ...  # type: ignore[misc]",
        146: "    def gather(  # type: ignore[misc]",
        150: "    def gather(  # type: ignore[misc]",
        158: "    def gather(  # type: ignore[misc]",
        167: "    def gather(  # type: ignore[misc]",
        177: "    def gather(  # type: ignore[misc]",
        188: "    def gather(  # type: ignore[misc]",
        192: "    def gather(  # type: ignore[misc]",
        200: "    def gather(  # type: ignore[misc]",
        209: "    def gather(  # type: ignore[misc]",
        219: "    def gather(  # type: ignore[misc]",
        232: "    def gather(  # type: ignore[misc]",
        245: '    async def wait(fs: Iterable[_FT], *, timeout: float | None = None, return_when: str = "ALL_COMPLETED") -> tuple[set[_FT], set[_FT]]: ...  # type: ignore[misc]',
        259: "    async def wait(  # type: ignore[misc]",
        280: "class Task(Future[_T_co], Generic[_T_co]):  # type: ignore[type-var]  # pyright: ignore[reportGeneralTypeIssues]",
    },
    WindowsPath("stdlib/asyncio/windows_utils.pyi"): {
        34: "        stdin: PipeHandle | None  # type: ignore[assignment]",
        35: "        stdout: PipeHandle | None  # type: ignore[assignment]",
        36: "        stderr: PipeHandle | None  # type: ignore[assignment]",
    },
    WindowsPath("stdlib/collections/__init__.pyi"): {
        84: "        def __ror__(self, other: UserDict[_T1, _T2] | dict[_T1, _T2]) -> UserDict[_KT | _T1, _VT | _T2]: ...  # type: ignore[misc]",
        86: "        @overload  # type: ignore[misc]",
        231: "    def pop(self) -> _T: ...  # type: ignore[override]",
        238: "    def __getitem__(self, __index: SupportsIndex) -> _T: ...  # type: ignore[override]",
        239: "    def __setitem__(self, __i: SupportsIndex, __x: _T) -> None: ...  # type: ignore[override]",
        240: "    def __delitem__(self, __i: SupportsIndex) -> None: ...  # type: ignore[override]",
        267: "    def fromkeys(cls, iterable: Any, v: int | None = None) -> NoReturn: ...  # type: ignore[override]",
        280: "    @overload  # type: ignore[override]",
        295: "    def __or__(self, other: Counter[_S]) -> Counter[_T | _S]: ...  # type: ignore[override]",
        299: "    def __iadd__(self, other: Counter[_T]) -> Self: ...  # type: ignore[misc]",
        302: "    def __ior__(self, other: Counter[_T]) -> Self: ...  # type: ignore[override,misc]",
        326: "class _odict_keys(dict_keys[_KT_co, _VT_co], Reversible[_KT_co]):  # type: ignore[misc]  # pyright: ignore",
        330: "class _odict_items(dict_items[_KT_co, _VT_co], Reversible[tuple[_KT_co, _VT_co]]):  # type: ignore[misc]  # pyright: ignore",
        334: "class _odict_values(dict_values[_KT_co, _VT_co], Reversible[_VT_co], Generic[_KT_co, _VT_co]):  # type: ignore[misc]  # pyright: ignore",
        428: "        @overload  # type: ignore[misc]",
    },
    WindowsPath("stdlib/ctypes/__init__.pyi"): {
        71: "    def __mul__(cls: type[_CT], other: int) -> type[Array[_CT]]: ...  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]",
        72: "    def __rmul__(cls: type[_CT], other: int) -> type[Array[_CT]]: ...  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]",
    },
    WindowsPath("stdlib/dbm/gnu.pyi"): {
        37: "        __new__: None  # type: ignore[assignment]",
        38: "        __init__: None  # type: ignore[assignment]",
    },
    WindowsPath("stdlib/dbm/ndbm.pyi"): {
        33: "        __new__: None  # type: ignore[assignment]",
        34: "        __init__: None  # type: ignore[assignment]",
    },
    WindowsPath("stdlib/email/policy.pyi"): {
        45: "    def header_fetch_parse(self, name: str, value: str) -> str | Header: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/email/_header_value_parser.pyi"): {
        326: "    def __getnewargs__(self) -> tuple[str, str]: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/encodings/utf_8_sig.pyi"): {
        6: "    def getstate(self) -> int: ...  # type: ignore[override]",
        7: "    def setstate(self, state: int) -> None: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/http/client.pyi"): {
        121: "    def readline(self, limit: int = -1) -> bytes: ...  # type: ignore[override]",
        176: "    sock: ssl.SSLSocket | Any  # type: ignore[override]",
    },
    WindowsPath("stdlib/http/cookies.pyi"): {35: "    @overload  # type: ignore[override]"},
    WindowsPath("stdlib/importlib/abc.pyi"): {
        193: "        def open_resource(self, resource: str) -> BufferedReader: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/importlib/metadata/__init__.pyi"): {
        35: "    def name(self) -> str: ...  # type: ignore[override]",
        71: "        def __getitem__(self, name: int | str) -> EntryPoint: ...  # type: ignore[override]",
        95: "        def select(self) -> Self: ...  # type: ignore[misc]",
        194: "    def entry_points() -> SelectableGroups: ...  # type: ignore[misc]",
    },
    WindowsPath("stdlib/lib2to3/pgen2/pgen.pyi"): {
        43: "    def __eq__(self, other: DFAState) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/logging/handlers.pyi"): {131: "    def makeSocket(self) -> socket: ...  # type: ignore[override]"},
    WindowsPath("stdlib/multiprocessing/managers.pyi"): {
        83: "    def keys(self) -> list[_KT]: ...  # type: ignore[override]",
        84: "    def items(self) -> list[tuple[_KT, _VT]]: ...  # type: ignore[override]",
        85: "    def values(self) -> list[_VT]: ...  # type: ignore[override]",
        118: "    def __iadd__(self, __x: Iterable[_T]) -> Self: ...  # type: ignore[override]",
        119: "    def __imul__(self, __n: SupportsIndex) -> Self: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/os/__init__.pyi"): {
        232: "    def setdefault(self, key: AnyStr, value: AnyStr) -> AnyStr: ...  # type: ignore[override]",
        245: "        @overload  # type: ignore[misc]",
        853: "    def close(self) -> int | None: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/tkinter/tix.pyi"): {267: "    def forget(self, name: str) -> None: ...  # type: ignore[override]"},
    WindowsPath("stdlib/tkinter/ttk.pyi"): {
        198: "    @overload  # type: ignore[override]",
        223: "    @overload  # type: ignore[override]",
        247: "    def bbox(self, index) -> tuple[int, int, int, int]: ...  # type: ignore[override]",
        278: "    @overload  # type: ignore[override]",
        306: "    @overload  # type: ignore[override]",
        587: "    @overload  # type: ignore[override]",
        601: "    @overload  # type: ignore[override]",
        710: "class Scale(Widget, tkinter.Scale):  # type: ignore[misc]",
        729: "    @overload  # type: ignore[override]",
        749: "    @overload  # type: ignore[override]",
        771: "class Scrollbar(Widget, tkinter.Scrollbar):  # type: ignore[misc]",
        784: "    @overload  # type: ignore[override]",
        798: "    @overload  # type: ignore[override]",
        893: "    @overload  # type: ignore[override]",
        924: "    config = configure  # type: ignore[assignment]",
        1000: '    def bbox(self, item, column: _TreeviewColumnId | None = None) -> tuple[int, int, int, int] | Literal[""]: ...  # type: ignore[override]',
        1028: "    @overload  # type: ignore[override]",
        1043: "    def heading(self, column: _TreeviewColumnId, option: None = None) -> _TreeviewHeaderDict: ...  # type: ignore[misc]",
        1087: "    def item(self, item: str, option: None = None) -> _TreeviewItemDict: ...  # type: ignore[misc]",
    },
    WindowsPath("stdlib/tkinter/__init__.pyi"): {
        1208: "    def bbox(self, *args: str | _CanvasItemId) -> tuple[int, int, int, int]: ...  # type: ignore[override]",
        1730: "    def lower(self, __first: str | _CanvasItemId, __second: str | _CanvasItemId | None = ...) -> None: ...  # type: ignore[override]",
        1732: "    def tkraise(self, __first: str | _CanvasItemId, __second: str | _CanvasItemId | None = ...) -> None: ...  # type: ignore[override]",
        1733: "    def lift(self, __first: str | _CanvasItemId, __second: str | _CanvasItemId | None = ...) -> None: ...  # type: ignore[override]",
        1962: "    def selection_clear(self) -> None: ...  # type: ignore[override]",
        2196: "    def bbox(self, index: str | int) -> tuple[int, int, int, int] | None: ...  # type: ignore[override]",
        2208: "    def selection_clear(self, first: str | int, last: str | int | None = None) -> None: ...  # type: ignore[override]",
        2214: "    def size(self) -> int: ...  # type: ignore[override]",
        3016: "    def bbox(self, index: _TextIndex) -> tuple[int, int, int, int] | None: ...  # type: ignore[override]",
        3425: "    def bbox(self, index) -> tuple[int, int, int, int] | None: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/unittest/case.pyi"): {
        134: "    def assertRaises(  # type: ignore[misc]",
        146: "    def assertRaisesRegex(  # type: ignore[misc]",
        159: "    def assertWarns(  # type: ignore[misc]",
        171: "    def assertWarnsRegex(  # type: ignore[misc]",
    },
    WindowsPath("stdlib/unittest/mock.pyi"): {
        285: "    def __call__(  # type: ignore[misc]",
        310: "    def object(  # type: ignore[misc]",
    },
    WindowsPath("stdlib/urllib/error.pyi"): {16: "    def reason(self) -> str: ...  # type: ignore[override]"},
    WindowsPath("stdlib/xml/dom/expatbuilder.pyi"): {
        89: "    def parseFile(self, file: SupportsRead[ReadableBuffer | str]) -> None: ...  # type: ignore[override]",
        90: "    def parseString(self, string: str | ReadableBuffer) -> None: ...  # type: ignore[override]",
        91: "    def start_doctype_decl_handler(self, name, publicId, systemId, has_internal_subset) -> None: ...  # type: ignore[override]",
    },
    WindowsPath("stdlib/xml/dom/minicompat.pyi"): {
        16: "    def __add__(self, other: Iterable[_T]) -> NodeList[_T]: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/xmlrpc/client.pyi"): {
        83: "    def __eq__(self, other: _DateTimeComparable) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stdlib/xmlrpc/server.pyi"): {105: "    def docroutine(  # type: ignore[override]"},
    WindowsPath("stubs/beautifulsoup4/bs4/element.pyi"): {
        22: "    def encode(self, encoding: str) -> str: ...  # type: ignore[override]  # incompatible with str",
        27: "    def encode(self, encoding: str) -> str: ...  # type: ignore[override]  # incompatible with str",
    },
    WindowsPath("stubs/beautifulsoup4/bs4/__init__.pyi"): {87: "    def decode(  # type: ignore[override]"},
    WindowsPath("stubs/beautifulsoup4/bs4/builder/_html5lib.pyi"): {
        11: "    def prepare_markup(  # type: ignore[override]  # user_specified_encoding doesn't have a default"
    },
    WindowsPath("stubs/beautifulsoup4/bs4/builder/_lxml.pyi"): {
        22: "    def prepare_markup(  # type: ignore[override]  # the order of the parameters is different"
    },
    WindowsPath("stubs/boto/boto/connection.pyi"): {170: "    def make_request(  # type: ignore[override]"},
    WindowsPath("stubs/boto/boto/utils.pyi"): {
        106: "    def __eq__(self, other: _Str | bytes | None) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/boto/boto/s3/connection.pyi"): {128: "    def make_request(  # type: ignore[override]"},
    WindowsPath("stubs/cachetools/cachetools/__init__.pyi"): {23: "    @overload  # type: ignore[override]"},
    WindowsPath("stubs/cffi/_cffi_backend.pyi"): {90: "    __hash__: ClassVar[None]  # type: ignore[assignment]"},
    WindowsPath("stubs/console-menu/consolemenu/console_menu.pyi"): {
        79: "    def __eq__(self, o: MenuItem) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/dockerfile-parse/dockerfile_parse/parser.pyi"): {
        16: "    def __hash__(self) -> int: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/ExifRead/exifread/utils.pyi"): {8: "def ord_(dta: str) -> int: ...  # type: ignore[misc]"},
    WindowsPath("stubs/Flask-Cors/flask_cors/core.pyi"): {
        57: "def ensure_iterable(inst: str) -> list[str]: ...  # type: ignore[misc]"
    },
    WindowsPath("stubs/Flask-SQLAlchemy/flask_sqlalchemy/__init__.pyi"): {
        17: "    def get_bind(self, mapper: Incomplete | None = ..., clause: Incomplete | None = ...): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/fpdf2/fpdf/fpdf.pyi"): {
        455: '    def output(self, name: Literal[""] = ...) -> bytearray: ...  # type: ignore[misc]'
    },
    WindowsPath("stubs/fpdf2/fpdf/line_break.pyi"): {
        54: "    def __eq__(self, other: Fragment) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/fpdf2/fpdf/template.pyi"): {
        39: "    def render(self, outfile: Incomplete | None = ..., dest: Incomplete | None = ...) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/gdb/gdb/__init__.pyi"): {
        79: "    def __eq__(self, other: _ValueOrInt) -> bool: ...  # type: ignore[override]",
        80: "    def __ne__(self, other: _ValueOrInt) -> bool: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/google-cloud-ndb/google/cloud/ndb/model.pyi"): {
        86: "    def __eq__(self, value: object) -> query_module.FilterNode: ...  # type: ignore[override]",
        87: "    def __ne__(self, value: object) -> query_module.FilterNode: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/httplib2/httplib2/__init__.pyi"): {
        81: "    def add(self, key, cert, domain, password) -> None: ...  # type: ignore[override]",
        82: "    def iter(self, domain) -> Generator[tuple[str, str, str], None, None]: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/humanfriendly/humanfriendly/case.pyi"): {
        17: "    def update(self, other: Incomplete | None = ..., **kw) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/invoke/invoke/config.pyi"): {11: "    __hash__: ClassVar[None]  # type: ignore[assignment]"},
    WindowsPath("stubs/invoke/invoke/tasks.pyi"): {
        48: "    def __eq__(self, other: Task[Incomplete, Incomplete]) -> bool: ...  # type: ignore[override]",
        108: "    def __eq__(self, other: Call) -> bool: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/JACK-Client/jack/__init__.pyi"): {
        13: "class _JackPositionT(_CDataBase):  # type: ignore[misc]  # pyright: ignore"
    },
    WindowsPath("stubs/jmespath/jmespath/exceptions.pyi"): {
        15: "    token_value: str | None  # type: ignore[assignment]",
        16: "    token_type: str | None  # type: ignore[assignment]",
    },
    WindowsPath("stubs/keyboard/keyboard/mouse.pyi"): {
        32: "    def pre_process_event(  # type: ignore[override]  # Mouse specific events and return"
    },
    WindowsPath("stubs/keyboard/keyboard/__init__.pyi"): {
        19: "    def wait(self) -> None: ...  # type: ignore[override]  # Actual implementation"
    },
    WindowsPath("stubs/ldap3/ldap3/protocol/novell.pyi"): {43: "    componentType: OctetString  # type: ignore[assignment]"},
    WindowsPath("stubs/ldap3/ldap3/protocol/rfc4511.pyi"): {
        47: "    componentType: AttributeValue  # type: ignore[assignment]",
        50: "    componentType: AttributeValue  # type: ignore[assignment]",
        60: "    componentType: Attribute  # type: ignore[assignment]",
        99: "    componentType: URI  # type: ignore[assignment]",
        119: "    componentType: Control  # type: ignore[assignment]",
        131: "    componentType: Selector  # type: ignore[assignment]",
        163: "    componentType: Substring  # type: ignore[assignment]",
        172: "    componentType: Filter  # type: ignore[assignment]",
        177: "    componentType: Filter  # type: ignore[assignment]",
        203: "    componentType: PartialAttribute  # type: ignore[assignment]",
        212: "    componentType: Change  # type: ignore[assignment]",
        258: "    componentType: URI  # type: ignore[assignment]",
    },
    WindowsPath("stubs/Markdown/markdown/inlinepatterns.pyi"): {
        51: "    def handleMatch(self, m: Match[str], data) -> tuple[Element, int, int] | tuple[None, None, None]: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/mock/mock/mock.pyi"): {
        227: "    def __call__(  # type: ignore[misc]",
        257: "    def object(  # type: ignore[misc]",
        326: "    __annotations__: dict[str, Any] | None  # type: ignore[assignment]",
    },
    WindowsPath("stubs/netaddr/netaddr/ip/__init__.pyi"): {
        127: "    def __contains__(self, other: BaseIP | _IPNetworkAddr) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/oauthlib/oauthlib/oauth2/rfc6749/clients/backend_application.pyi"): {
        6: "    def prepare_request_body(self, body: str = ..., scope: Incomplete | None = ..., include_client_id: bool = ..., **kwargs): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/oauthlib/oauthlib/oauth2/rfc6749/clients/legacy_application.pyi"): {
        7: "    def prepare_request_body(  # type: ignore[override]"
    },
    WindowsPath("stubs/oauthlib/oauthlib/oauth2/rfc6749/clients/mobile_application.pyi"): {
        7: "    def prepare_request_uri(  # type: ignore[override]",
        11: "    def parse_request_uri_response(self, uri, state: Incomplete | None = ..., scope: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/oauthlib/oauthlib/oauth2/rfc6749/clients/service_application.pyi"): {
        20: "    def prepare_request_body(  # type: ignore[override]"
    },
    WindowsPath("stubs/oauthlib/oauthlib/oauth2/rfc6749/clients/web_application.pyi"): {
        9: "    def prepare_request_uri(  # type: ignore[override]",
        19: "    def prepare_request_body(  # type: ignore[override]",
        28: "    def parse_request_uri_response(self, uri, state: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/chart/data_source.pyi"): {
        5: "class NumFmt(Serialisable):  # type: ignore[misc]",
        15: "class NumVal(Serialisable):  # type: ignore[misc]",
        21: "class NumData(Serialisable):  # type: ignore[misc]",
        31: "class NumRef(Serialisable):  # type: ignore[misc]",
        65: "class NumDataSource(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/chart/series.pyi"): {
        68: "    def to_tree(self, tagname: Incomplete | None = ..., idx: Incomplete | None = ...): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/openpyxl/openpyxl/chart/_chart.pyi"): {
        5: "class AxId(Serialisable):  # type: ignore[misc]",
        35: "    def to_tree(self, namespace: Incomplete | None = ..., tagname: Incomplete | None = ..., idx: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/drawing/text.pyi"): {
        4: "class EmbeddedWAVAudioFile(Serialisable):  # type: ignore[misc]",
        141: "class TabStop(Serialisable):  # type: ignore[misc]",
        146: "class TabStopList(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/formatting/rule.pyi"): {20: "class RuleType(Serialisable):  # type: ignore[misc]"},
    WindowsPath("stubs/openpyxl/openpyxl/packaging/extended.pyi"): {
        6: "class DigSigBlob(Serialisable):  # type: ignore[misc]",
        10: "class VectorLpstr(Serialisable):  # type: ignore[misc]",
        14: "class VectorVariant(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/pivot/cache.pyi"): {
        118: "class OLAPSets(Serialisable):  # type: ignore[misc]",
        192: "class GroupMembers(Serialisable):  # type: ignore[misc]",
        243: "class GroupLevels(Serialisable):  # type: ignore[misc]",
        254: "class FieldsUsage(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/pivot/fields.pyi"): {
        9: "class Tuple(Serialisable):  # type: ignore[misc]",
        15: "class TupleList(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/pivot/table.pyi"): {
        60: "class PivotFilters(Serialisable):  # type: ignore[misc]",
        336: "class AutoSortScope(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/styles/borders.pyi"): {19: "class Side(Serialisable):  # type: ignore[misc]"},
    WindowsPath("stubs/openpyxl/openpyxl/styles/fills.pyi"): {
        49: "    def to_tree(self, tagname: Incomplete | None = ..., idx: Incomplete | None = ...): ...  # type: ignore[override]",
        78: "    def to_tree(self, tagname: Incomplete | None = ..., namespace: Incomplete | None = ..., idx: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/styles/named_styles.pyi"): {4: "class NamedStyle(Serialisable):  # type: ignore[misc]"},
    WindowsPath("stubs/openpyxl/openpyxl/styles/numbers.pyi"): {
        58: "class NumberFormat(Serialisable):  # type: ignore[misc]",
        63: "class NumberFormatList(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/workbook/external_link/external.pyi"): {
        4: "class ExternalCell(Serialisable):  # type: ignore[misc]",
        13: "class ExternalRow(Serialisable):  # type: ignore[misc]",
        19: "class ExternalSheetData(Serialisable):  # type: ignore[misc]",
        26: "class ExternalSheetDataSet(Serialisable):  # type: ignore[misc]",
        31: "class ExternalSheetNames(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/worksheet/cell_range.pyi"): {6: "class CellRange(Serialisable):  # type: ignore[misc]"},
    WindowsPath("stubs/openpyxl/openpyxl/worksheet/datavalidation.pyi"): {
        71: "    def to_tree(self, tagname: Incomplete | None = ...): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/openpyxl/openpyxl/worksheet/related.pyi"): {
        4: "class Related(Serialisable):  # type: ignore[misc]",
        7: "    def to_tree(self, tagname, idx: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/openpyxl/openpyxl/worksheet/views.pyi"): {
        4: "class Pane(Serialisable):  # type: ignore[misc]",
        19: "class Selection(Serialisable):  # type: ignore[misc]",
    },
    WindowsPath("stubs/opentracing/opentracing/mocktracer/tracer.pyi"): {16: "    def start_span(  # type: ignore[override]"},
    WindowsPath("stubs/paramiko/paramiko/hostkeys.pyi"): {
        13: "    def keys(self) -> list[str]: ...  # type: ignore[override]",
        28: "    def keys(self) -> list[str]: ...  # type: ignore[override]",
        29: "    def values(self) -> list[_SubDict]: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/paramiko/paramiko/rsakey.pyi"): {
        28: "    def sign_ssh_data(self, data: bytes, algorithm: str = ...) -> Message: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/parsimonious/parsimonious/expressions.pyi"): {
        34: "    identity_tuple: tuple[str, str]  # type: ignore[assignment]",
        41: "    identity_tuple: tuple[str, Pattern[str]]  # type: ignore[assignment]",
    },
    WindowsPath("stubs/parsimonious/parsimonious/grammar.pyi"): {
        46: "    def generic_visit(self, node: Node, visited_children: collections.abc.Sequence[Any]) -> collections.abc.Sequence[Any] | Node: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/passlib/passlib/handlers/argon2.pyi"): {
        12: "class _Argon2Common(  # type: ignore[misc]",
        39: "    def using(  # type: ignore[override]",
        83: "class argon2(_NoBackend, _Argon2Common):  # type: ignore[misc]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/bcrypt.pyi"): {
        5: "class _BcryptCommon(uh.SubclassBackendMixin, uh.TruncateMixin, uh.HasManyIdents, uh.HasRounds, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        35: "class bcrypt(_NoBackend, _BcryptCommon):  # type: ignore[misc]",
        48: "    def using(cls, version: Incomplete | None = ..., **kwds): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/cisco.pyi"): {
        20: "    def using(cls, salt: int | None = ..., **kwds): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/passlib/passlib/handlers/des_crypt.pyi"): {
        4: "class des_crypt(uh.TruncateMixin, uh.HasManyBackends, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        16: "class bsdi_crypt(uh.HasManyBackends, uh.HasRounds, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        42: "class crypt16(uh.TruncateMixin, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/digests.pyi"): {
        23: "    def hash(cls, secret, user, realm, encoding: Incomplete | None = ...): ...  # type: ignore[override]",
        25: "    def verify(cls, secret, hash, user, realm, encoding: str = ...): ...  # type: ignore[override]",
        31: "    def genhash(cls, secret, config, user, realm, encoding: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/django.pyi"): {
        13: "class DjangoVariableHash(uh.HasRounds, DjangoSaltedHash):  # type: ignore[misc]",
        60: "class django_des_crypt(uh.TruncateMixin, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        80: "    def verify(cls, secret: str | bytes, hash: str | bytes) -> bool: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/fshp.pyi"): {
        4: "class fshp(uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):  # type: ignore[misc]",
        16: "    def using(cls, variant: int | str | bytes | None = ..., **kwds): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/misc.pyi"): {
        13: "    def verify(cls, secret: str | bytes, hash: str | bytes, enable_wildcard: bool = ...): ...  # type: ignore[override]",
        21: "    def using(cls, marker: Incomplete | None = ..., **kwds): ...  # type: ignore[override]",
        25: "    def verify(cls, secret: str | bytes, hash: str | bytes) -> bool: ...  # type: ignore[override]",
        29: "    def genhash(cls, secret: str | bytes, config, marker: Incomplete | None = ...): ...  # type: ignore[override]",
        43: "    def hash(cls, secret: str | bytes, encoding: Incomplete | None = ...): ...  # type: ignore[override]",
        45: "    def verify(cls, secret: str | bytes, hash: str | bytes, encoding: str | None = ...): ...  # type: ignore[override]",
        49: "    def genhash(cls, secret, config, encoding: str | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/mssql.pyi"): {
        12: "    def verify(cls, secret: str | bytes, hash: str | bytes) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/passlib/passlib/handlers/pbkdf2.pyi"): {
        6: "class Pbkdf2DigestHandler(uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):  # type: ignore[misc]",
        15: "    def from_string(cls, hash: str | bytes) -> Self: ...  # type: ignore[override]",
        42: "class cta_pbkdf2_sha1(uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):  # type: ignore[misc]",
        55: "class dlitz_pbkdf2_sha1(uh.HasRounds, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        77: "class grub_pbkdf2_sha512(uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):  # type: ignore[misc]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/phpass.pyi"): {
        5: "class phpass(uh.HasManyIdents, uh.HasRounds, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        19: "    def from_string(cls, hash: str | bytes) -> Self: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/scram.pyi"): {
        5: "class scram(uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):  # type: ignore[misc]",
        25: "    def using(cls, default_algs: Incomplete | None = ..., algs: Incomplete | None = ..., **kwds): ...  # type: ignore[override]",
        28: "    def verify(cls, secret, hash, full: bool = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/scrypt.pyi"): {
        5: "class scrypt(uh.ParallelismMixin, uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.HasManyIdents, uh.GenericHandler):  # type: ignore[misc]",
        20: "    def using(cls, block_size: Incomplete | None = ..., **kwds): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/sha1_crypt.pyi"): {
        7: "class sha1_crypt(uh.HasManyBackends, uh.HasRounds, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        20: "    def from_string(cls, hash: str | bytes) -> Self: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/sha2_crypt.pyi"): {
        5: "class _SHA2_Common(uh.HasManyBackends, uh.HasRounds, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        15: "    def from_string(cls, hash: str | bytes) -> Self: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/handlers/sun_md5_crypt.pyi"): {
        5: "class sun_md5_crypt(uh.HasRounds, uh.HasSalt, uh.GenericHandler):  # type: ignore[misc]",
        22: "    def from_string(cls, hash: str | bytes) -> Self: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/utils/handlers.pyi"): {
        23: "    def using(cls, relaxed: bool = ...) -> type[Self]: ...  # type: ignore[override]",
        29: "    def using(cls, truncate_error: object = ..., *, relaxed: bool = ...) -> type[Self]: ...  # type: ignore[override]",
        84: "    ident: str  # type: ignore[misc]",
        86: "    def using(cls, default_ident: Incomplete | None = ..., ident: Incomplete | None = ..., **kwds): ...  # type: ignore[override]",
        97: "    def using(cls, default_salt_size: int | None = ..., salt_size: int | None = ..., salt: str | bytes | None = ..., **kwds): ...  # type: ignore[override]",
        103: "    salt_chars: ClassVar[bytes]  # type: ignore[assignment]",
        116: "    def using(  # type: ignore[override]",
        134: "    def using(cls, parallelism: Incomplete | None = ..., **kwds): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/passlib/passlib/utils/compat/_ordered_dict.pyi"): {
        18: "    def update(*args, **kwds) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/pika/pika/amqp_object.pyi"): {
        5: "    def __eq__(self, other: AMQPObject | None) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/Pillow/PIL/MicImagePlugin.pyi"): {17: "    def tell(self) -> int | None: ...  # type: ignore[override]"},
    WindowsPath("stubs/polib/polib.pyi"): {
        35: "    def __contains__(self, entry: _TB) -> bool: ...  # type: ignore[override]  # AttributeError otherwise",
        62: "    def save(self, fpath: str | None = ...) -> None: ...  # type: ignore[override]  # binary file does not allow argument repr_method",
        99: "    def __eq__(self, other: POEntry) -> bool: ...  # type: ignore[override]",
        100: "    def __ne__(self, other: POEntry) -> bool: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/prettytable/prettytable/colortable.pyi"): {
        29: "    def format_code(s: str) -> str: ...  # type: ignore[misc]  # pyright: ignore[reportGeneralTypeIssues]"
    },
    WindowsPath("stubs/psycopg2/psycopg2/extras.pyi"): {
        59: "    def fetchone(self) -> DictRow | None: ...  # type: ignore[override]",
        60: "    def fetchmany(self, size: int | None = ...) -> list[DictRow]: ...  # type: ignore[override]",
        61: "    def fetchall(self) -> list[DictRow]: ...  # type: ignore[override]",
        62: "    def __next__(self) -> DictRow: ...  # type: ignore[override]",
        100: "    def fetchone(self) -> RealDictRow | None: ...  # type: ignore[override]",
        101: "    def fetchmany(self, size: int | None = ...) -> list[RealDictRow]: ...  # type: ignore[override]",
        102: "    def fetchall(self) -> list[RealDictRow]: ...  # type: ignore[override]",
        103: "    def __next__(self) -> RealDictRow: ...  # type: ignore[override]",
        134: "    def fetchone(self) -> NamedTuple | None: ...  # type: ignore[override]",
        135: "    def fetchmany(self, size: int | None = ...) -> list[NamedTuple]: ...  # type: ignore[override]",
        136: "    def fetchall(self) -> list[NamedTuple]: ...  # type: ignore[override]",
        137: "    def __next__(self) -> NamedTuple: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/pyasn1/pyasn1/codec/ber/encoder.pyi"): {43: "    supportIndefLenMode: int  # type: ignore[assignment]"},
    WindowsPath("stubs/pycocotools/pycocotools/mask.pyi"): {
        24: "def frPyObjects(pyobj: _NDArrayUInt32 | list[list[int]] | list[_EncodedRLE], h: int, w: int) -> list[_EncodedRLE]: ...  # type: ignore[misc]"
    },
    WindowsPath("stubs/pyflakes/pyflakes/checker.pyi"): {
        41: "def convert_to_value(item: ast.Str) -> str: ...  # type: ignore[misc]",
        43: "def convert_to_value(item: ast.Bytes) -> bytes: ...  # type: ignore[misc]",
        45: "def convert_to_value(item: ast.Tuple) -> tuple[Any, ...]: ...  # type: ignore[misc]",
    },
    WindowsPath("stubs/Pygments/pygments/lexer.pyi"): {92: "    def get_tokens_unprocessed(  # type: ignore[override]"},
    WindowsPath("stubs/Pygments/pygments/token.pyi"): {
        8: "    def __contains__(self, val: _TokenType) -> bool: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/pyinstaller/PyInstaller/lib/modulegraph/modulegraph.pyi"): {
        42: "    def infoTuple(self) -> tuple[str, ...]: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/PyMySQL/pymysql/cursors.pyi"): {
        42: "    def fetchall(self) -> list[tuple[Any, ...]]: ...  # type: ignore[override]",
        46: "class DictCursor(DictCursorMixin, Cursor): ...  # type: ignore[misc]",
        48: "class SSDictCursor(DictCursorMixin, SSCursor):  # type: ignore[misc]",
        49: "    def fetchall_unbuffered(self) -> Iterator[dict[str, Any]]: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/python-crontab/cronlog.pyi"): {
        26: "    def __iter__(self) -> dict[str, str | None]: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/python-dateutil/dateutil/tz/tz.pyi"): {
        21: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        33: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        46: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        53: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        69: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
    },
    WindowsPath("stubs/python-dateutil/dateutil/tz/_common.pyi"): {
        25: "    __hash__: ClassVar[None]  # type: ignore[assignment]"
    },
    WindowsPath("stubs/python-nmap/nmap/nmap.pyi"): {
        99: "    def scan(  # type: ignore[override]",
        104: "    def still_scanning(self) -> None: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/python-xlib/Xlib/rdb.pyi"): {
        76: "    def parse(self, name: str, db: ResourceDB, args: Sequence[str]) -> Sequence[str]: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/python-xlib/Xlib/ext/record.pyi"): {
        33: "    def pack_value(self, val: _S) -> tuple[_S, int, None]: ...  # type: ignore[override]",
        34: '    def parse_binary_value(self, data: _T, display: Unused, length: Unused, format: Unused) -> tuple[_T, Literal[""]]: ...  # type: ignore[override]  # See: https://github.com/python-xlib/python-xlib/pull/249',
    },
    WindowsPath("stubs/python-xlib/Xlib/ext/res.pyi"): {
        40: "    def parse_value(self, length: int, display: Unused) -> int: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/python-xlib/Xlib/ext/xinput.pyi"): {
        120: "    def check_value(self, value: float) -> int: ...  # type: ignore[override]",
        121: "    def parse_value(self, value: _Floatable, display: Unused) -> float: ...  # type: ignore[override]",
        125: "    def check_value(self, value: _T) -> _T: ...  # type: ignore[override]",
        126: "    def parse_value(self, value: tuple[_Floatable, _Floatable], display: Unused) -> float: ...  # type: ignore[override]",
        134: "    def pack_value(self, val: int | Iterable[int]) -> tuple[bytes, int, None]: ...  # type: ignore[override]",
        152: "    def parse_binary_value(  # type: ignore[override]  # length: None will error. See: https://github.com/python-xlib/python-xlib/pull/248",
    },
    WindowsPath("stubs/python-xlib/Xlib/protocol/rq.pyi"): {
        83: '    def parse_value(self, value: int, display: Unused) -> Literal["even", "odd"]: ...  # type: ignore[override]',
        117: "    @overload  # type: ignore[override]",
        121: "    def parse_value(self, value: int, display: _BaseDisplay) -> int: ...  # type: ignore[override]  # display: None will error. See: https://github.com/python-xlib/python-xlib/pull/248",
        157: "    def check_value(self, value: object) -> bool: ...  # type: ignore[override]",
        163: "    def check_value(self, val: _T) -> _T: ...  # type: ignore[override]",
        176: "    def pack_value(  # type: ignore[override]  # Override Callable",
        179: "    @overload  # type: ignore[override]  # Overload for specific values",
        190: "    def pack_value(self, val: bytes | str) -> tuple[bytes, int, None]: ...  # type: ignore[override]  # Override Callable",
        191: "    @overload  # type: ignore[override]  # Overload for specific values",
        204: "    def pack_value(self, val: Sequence[object]) -> tuple[bytes, int, None]: ...  # type: ignore[override]  # Override Callable",
        205: "    def parse_binary_value(  # type: ignore[override]  # length: None will error. See: https://github.com/python-xlib/python-xlib/pull/248",
        219: "    def pack_value(  # type: ignore[override]  # Override Callable",
        237: "    def parse_value(self, val: SliceableBuffer, display: display.Display | None) -> DictWrapper: ...  # type: ignore[override]",
        238: "    def pack_value(  # type: ignore[override]  # Override Callable",
        241: "    def check_value(self, val: tuple[_T, ...] | dict[str, _T] | DictWrapper) -> list[_T]: ...  # type: ignore[override]",
        248: "    def pack_value(  # type: ignore[override]  # Override Callable",
        259: "    default: str  # type: ignore[assignment]  # Actually different from base class",
        264: "    def pack_value(  # type: ignore[override]  # Override Callable",
        276: "    def pack_value(  # type: ignore[override]  # Override Callable",
        285: "    def pack_value(  # type: ignore[override]  # Override Callable",
        291: "    def pack_value(self, value: Event) -> tuple[SliceableBuffer, None, None]: ...  # type: ignore[override]  # Override Callable",
        292: "    def parse_binary_value(  # type: ignore[override]",
        361: "    def pack_value(  # type: ignore[override]  # Override Callable",
        364: "    def parse_binary_value(  # type: ignore[override]  # See: https://github.com/python-xlib/python-xlib/pull/249",
    },
    WindowsPath("stubs/pytz/pytz/reference.pyi"): {
        14: "    def utcoffset(self, dt: datetime.datetime) -> datetime.timedelta: ...  # type: ignore[override]",
        15: "    def dst(self, dt: datetime.datetime) -> datetime.timedelta: ...  # type: ignore[override]",
        16: "    def tzname(self, dt: datetime.datetime) -> str: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/pytz/pytz/tzinfo.pyi"): {34: "    @overload  # type: ignore[override]"},
    WindowsPath("stubs/pywin32/win32comext/axdebug/adb.pyi"): {
        51: "    def set_trace(self) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/pywin32/win32comext/axdebug/documents.pyi"): {
        17: "class DebugDocumentText(gateways.DebugDocumentInfo, gateways.DebugDocumentText, gateways.DebugDocument):  # type: ignore[misc]  # pyright: ignore"
    },
    WindowsPath("stubs/redis/redis/client.pyi"): {
        38: "    def update(self, data: SupportsItems[_StrType, _VT]) -> None: ...  # type: ignore[override]",
        391: "    def __enter__(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        411: "    def pipeline(self, transaction: bool = ..., shard_hint: Any = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        412: "    def acl_cat(self, category: str | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        413: "    def acl_deluser(self, username: str) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        414: "    def acl_genpass(self, bits: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        415: "    def acl_getuser(self, username: str) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        416: "    def acl_list(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        417: "    def acl_load(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        418: "    def acl_setuser(  # type: ignore[override]",
        436: "    def acl_users(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        437: "    def acl_whoami(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        438: "    def bgrewriteaof(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        439: "    def bgsave(self, schedule: bool = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        440: "    def client_id(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        441: "    def client_kill(self, address: str) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        442: "    def client_list(self, _type: str | None = ..., client_id: list[str] = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        443: "    def client_getname(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        444: "    def client_setname(self, name: str) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        445: "    def readwrite(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        446: "    def readonly(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        447: "    def config_get(self, pattern: PatternT = ..., *args: PatternT, **kwargs: _CommandOptions) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        448: "    def config_set(self, name: KeyT, value: EncodableT, *args: KeyT | EncodableT, **kwargs: _CommandOptions) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        449: "    def config_resetstat(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        450: "    def config_rewrite(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        451: "    def dbsize(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        452: "    def debug_object(self, key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        453: "    def echo(self, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        454: "    def flushall(self, asynchronous: bool = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        455: "    def flushdb(self, asynchronous: bool = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        456: "    def info(self, section: _Key | None = ..., *args: _Key, **kwargs: _CommandOptions) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        457: "    def lastsave(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        458: "    def object(self, infotype, key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        459: "    def ping(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        460: "    def save(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        461: "    def sentinel_get_master_addr_by_name(self, service_name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        462: "    def sentinel_master(self, service_name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        463: "    def sentinel_masters(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        464: "    def sentinel_monitor(self, name, ip, port, quorum) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        465: "    def sentinel_remove(self, name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        466: "    def sentinel_sentinels(self, service_name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        467: "    def sentinel_set(self, name, option, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        468: "    def sentinel_slaves(self, service_name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        469: "    def slaveof(self, host=..., port=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        470: "    def slowlog_get(self, num=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        471: "    def slowlog_len(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        472: "    def slowlog_reset(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        473: "    def time(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        474: "    def append(self, key, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        475: "    def bitcount(self, key: _Key, start: int | None = ..., end: int | None = ..., mode: str | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        476: "    def bitop(self, operation, dest, *keys) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        477: "    def bitpos(self, key, bit, start=..., end=..., mode: str | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        478: "    def decr(self, name, amount=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        479: "    def delete(self, *names: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        481: "    def dump(self, name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        482: "    def exists(self, *names: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        483: "    def __contains__(self, *names: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        484: "    def expire(self, name: _Key, time: int | timedelta, nx: bool = ..., xx: bool = ..., gt: bool = ..., lt: bool = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        485: "    def expireat(self, name, when, nx: bool = ..., xx: bool = ..., gt: bool = ..., lt: bool = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        486: "    def get(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        487: "    def __getitem__(self, name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        488: "    def getbit(self, name: _Key, offset: int) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        489: "    def getrange(self, key, start, end) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        490: "    def getset(self, name, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        491: "    def incr(self, name, amount=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        492: "    def incrby(self, name, amount=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        493: "    def incrbyfloat(self, name, amount=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        494: "    def keys(self, pattern: _Key = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        495: "    def mget(self, keys: _Key | Iterable[_Key], *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        496: "    def mset(self, mapping: Mapping[_Key, _Value]) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        497: "    def msetnx(self, mapping: Mapping[_Key, _Value]) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        498: "    def move(self, name: _Key, db: int) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        499: "    def persist(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        500: "    def pexpire(self, name: _Key, time: int | timedelta, nx: bool = ..., xx: bool = ..., gt: bool = ..., lt: bool = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        501: "    def pexpireat(self, name: _Key, when: int | datetime, nx: bool = ..., xx: bool = ..., gt: bool = ..., lt: bool = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        502: "    def psetex(self, name, time_ms, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        503: "    def pttl(self, name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        504: "    def randomkey(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        505: "    def rename(self, src, dst) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        506: "    def renamenx(self, src, dst) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        507: "    def restore(self, name, ttl, value, replace: bool = ..., absttl: bool = ..., idletime: Incomplete | None = ..., frequency: Incomplete | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        508: "    def set(  # type: ignore[override]",
        522: "    def setbit(self, name: _Key, offset: int, value: int) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        523: "    def setex(self, name: _Key, time: int | timedelta, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        524: "    def setnx(self, name, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        525: "    def setrange(self, name, offset, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        526: "    def strlen(self, name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        527: "    def substr(self, name, start, end=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        528: "    def ttl(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        529: "    def type(self, name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        530: "    def unlink(self, *names: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        531: "    def blmove(  # type: ignore[override]",
        539: "    def blpop(self, keys: _Value | Iterable[_Value], timeout: float = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        540: "    def brpop(self, keys: _Value | Iterable[_Value], timeout: float = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        541: "    def brpoplpush(self, src, dst, timeout=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        542: "    def lindex(self, name: _Key, index: int) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        543: "    def linsert(  # type: ignore[override]",
        546: "    def llen(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        547: "    def lmove(  # type: ignore[override]",
        550: "    def lpop(self, name, count: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        551: "    def lpush(self, name: _Value, *values: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        552: "    def lpushx(self, name, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        553: "    def lrange(self, name: _Key, start: int, end: int) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        554: "    def lrem(self, name: _Key, count: int, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        555: "    def lset(self, name: _Key, index: int, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        556: "    def ltrim(self, name: _Key, start: int, end: int) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        557: "    def rpop(self, name, count: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        558: "    def rpoplpush(self, src, dst) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        559: "    def rpush(self, name: _Value, *values: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        560: "    def rpushx(self, name, value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        561: "    def sort(  # type: ignore[override]",
        573: "    def scan(self, cursor: int = ..., match: _Key | None = ..., count: int | None = ..., _type: str | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        574: "    def scan_iter(self, match: _Key | None = ..., count: int | None = ..., _type: str | None = ...) -> Iterator[Any]: ...  # type: ignore[override]",
        575: "    def sscan(self, name: _Key, cursor: int = ..., match: _Key | None = ..., count: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        577: "    def hscan(self, name: _Key, cursor: int = ..., match: _Key | None = ..., count: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        582: "    def sadd(self, name: _Key, *values: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        583: "    def scard(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        584: "    def sdiff(self, keys: _Key | Iterable[_Key], *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        585: "    def sdiffstore(self, dest: _Key, keys: _Key | Iterable[_Key], *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        586: "    def sinter(self, keys: _Key | Iterable[_Key], *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        587: "    def sinterstore(self, dest: _Key, keys: _Key | Iterable[_Key], *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        588: "    def sismember(self, name: _Key, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        589: "    def smembers(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        590: "    def smove(self, src: _Key, dst: _Key, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        591: "    def spop(self, name: _Key, count: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        592: "    def srandmember(self, name: _Key, number: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        593: "    def srem(self, name: _Key, *values: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        594: "    def sunion(self, keys: _Key | Iterable[_Key], *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        595: "    def sunionstore(self, dest: _Key, keys: _Key | Iterable[_Key], *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        596: "    def xack(self, name, groupname, *ids) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        597: "    def xadd(self, name, fields, id=..., maxlen=..., approximate: bool = ..., nomkstream: bool = ..., minid: Incomplete | None = ..., limit: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        600: "    ) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        601: "    def xdel(self, name, *ids) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        602: "    def xgroup_create(self, name, groupname, id=..., mkstream=..., entries_read: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        603: "    def xgroup_delconsumer(self, name, groupname, consumername) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        604: "    def xgroup_destroy(self, name, groupname) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        605: "    def xgroup_setid(self, name, groupname, id, entries_read: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        606: "    def xinfo_consumers(self, name, groupname) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        607: "    def xinfo_groups(self, name) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        608: "    def xinfo_stream(self, name, full: bool = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        609: "    def xlen(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        610: "    def xpending(self, name, groupname) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        611: "    def xpending_range(self, name: _Key, groupname, min, max, count: int, consumername: Incomplete | None = ..., idle: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        612: "    def xrange(self, name, min=..., max=..., count=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        613: "    def xread(self, streams, count=..., block=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        614: "    def xreadgroup(self, groupname, consumername, streams, count=..., block=..., noack=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        615: "    def xrevrange(self, name, max=..., min=..., count=...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        616: "    def xtrim(self, name, maxlen: int | None = ..., approximate: bool = ..., minid: Incomplete | None = ..., limit: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        617: "    def zadd(  # type: ignore[override]",
        628: "    def zcard(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        629: "    def zcount(self, name: _Key, min: _Value, max: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        630: "    def zincrby(self, name: _Key, amount: float, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        631: '    def zinterstore(self, dest: _Key, keys: Iterable[_Key], aggregate: Literal["SUM", "MIN", "MAX"] | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]',
        632: "    def zlexcount(self, name: _Key, min: _Value, max: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        633: "    def zpopmax(self, name: _Key, count: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        634: "    def zpopmin(self, name: _Key, count: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        635: "    def bzpopmax(self, keys: _Key | Iterable[_Key], timeout: float = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        636: "    def bzpopmin(self, keys: _Key | Iterable[_Key], timeout: float = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        637: "    def zrange(  # type: ignore[override]",
        650: "    def zrangebylex(self, name: _Key, min: _Value, max: _Value, start: int | None = ..., num: int | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        651: "    def zrangebyscore(  # type: ignore[override]",
        661: "    def zrank(self, name: _Key, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        662: "    def zrem(self, name: _Key, *values: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        663: "    def zremrangebylex(self, name: _Key, min: _Value, max: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        664: "    def zremrangebyrank(self, name: _Key, min: _Value, max: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        665: "    def zremrangebyscore(self, name: _Key, min: _Value, max: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        666: "    def zrevrange(  # type: ignore[override]",
        669: "    def zrevrangebyscore(  # type: ignore[override]",
        679: "    def zrevrangebylex(  # type: ignore[override]",
        682: "    def zrevrank(self, name: _Key, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        683: "    def zscore(self, name: _Key, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        684: '    def zunionstore(self, dest: _Key, keys: Iterable[_Key], aggregate: Literal["SUM", "MIN", "MAX"] | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]',
        685: "    def pfadd(self, name: _Key, *values: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        686: "    def pfcount(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        687: "    def pfmerge(self, dest: _Key, *sources: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        688: "    def hdel(self, name: _Key, *keys: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        689: "    def hexists(self, name: _Key, key: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        690: "    def hget(self, name: _Key, key: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        691: "    def hgetall(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        692: "    def hincrby(self, name: _Key, key: _Key, amount: int = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        693: "    def hincrbyfloat(self, name: _Key, key: _Key, amount: float = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        694: "    def hkeys(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        695: "    def hlen(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        696: "    @overload  # type: ignore[override]",
        700: "    @overload  # type: ignore[override]",
        704: "    @overload  # type: ignore[override]",
        706: "    def hsetnx(self, name: _Key, key: _Key, value: _Value) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        707: "    def hmset(self, name: _Key, mapping: Mapping[_Key, _Value]) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        708: "    def hmget(self, name: _Key, keys: _Key | Iterable[_Key], *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        709: "    def hvals(self, name: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        710: "    def publish(self, channel: _Key, message: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        711: "    def eval(self, script, numkeys, *keys_and_args) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        712: "    def evalsha(self, sha, numkeys, *keys_and_args) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        713: "    def script_exists(self, *args) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        714: "    def script_flush(self, sync_type: Incomplete | None = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        715: "    def script_kill(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        716: "    def script_load(self, script) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        717: "    def pubsub_channels(self, pattern: _Key = ...) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        718: "    def pubsub_numsub(self, *args: _Key) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        719: "    def pubsub_numpat(self) -> Pipeline[_StrType]: ...  # type: ignore[override]",
        721: "    def cluster(self, cluster_arg: str, *args: Any) -> Pipeline[_StrType]: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/redis/redis/connection.pyi"): {228: "    def disconnect(self) -> None: ...  # type: ignore[override]"},
    WindowsPath("stubs/redis/redis/asyncio/client.pyi"): {
        198: "    async def reset(self) -> None: ...  # type: ignore[override]",
        212: "    def acl_cat(self, category: str | None = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        213: "    def acl_deluser(self, *username: str, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        214: "    def acl_genpass(self, bits: int | None = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        215: "    def acl_getuser(self, username: str, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        216: "    def acl_help(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        217: "    def acl_list(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        218: "    def acl_log(self, count: int | None = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        219: "    def acl_log_reset(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        220: "    def acl_load(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        221: "    def acl_save(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        222: "    def acl_setuser(  # type: ignore[override]",
        240: "    def acl_users(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        241: "    def acl_whoami(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        244: "    def cluster(self, cluster_arg: str, *args, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        245: "    def readwrite(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        246: "    def readonly(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        249: "    def append(self, key, value) -> Any: ...  # type: ignore[override]",
        250: "    def bitcount(self, key: _Key, start: int | None = ..., end: int | None = ..., mode: str | None = ...) -> Any: ...  # type: ignore[override]",
        251: "    def bitfield(self, key, default_overflow: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        252: "    def bitop(self, operation, dest, *keys) -> Any: ...  # type: ignore[override]",
        253: "    def bitpos(self, key: _Key, bit: int, start: int | None = ..., end: int | None = ..., mode: str | None = ...) -> Any: ...  # type: ignore[override]",
        254: "    def copy(self, source, destination, destination_db: Incomplete | None = ..., replace: bool = ...) -> Any: ...  # type: ignore[override]",
        255: "    def decr(self, name, amount: int = ...) -> Any: ...  # type: ignore[override]",
        256: "    def decrby(self, name, amount: int = ...) -> Any: ...  # type: ignore[override]",
        257: "    def delete(self, *names: _Key) -> Any: ...  # type: ignore[override]",
        258: "    def dump(self, name: _Key) -> Any: ...  # type: ignore[override]",
        259: "    def exists(self, *names: _Key) -> Any: ...  # type: ignore[override]",
        260: "    def expire(  # type: ignore[override]",
        263: "    def expireat(self, name, when, nx: bool = ..., xx: bool = ..., gt: bool = ..., lt: bool = ...) -> Any: ...  # type: ignore[override]",
        264: "    def get(self, name: _Key) -> Any: ...  # type: ignore[override]",
        265: "    def getdel(self, name: _Key) -> Any: ...  # type: ignore[override]",
        266: "    def getex(  # type: ignore[override]",
        275: "    def getbit(self, name: _Key, offset: int) -> Any: ...  # type: ignore[override]",
        276: "    def getrange(self, key, start, end) -> Any: ...  # type: ignore[override]",
        277: "    def getset(self, name, value) -> Any: ...  # type: ignore[override]",
        278: "    def incr(self, name: _Key, amount: int = ...) -> Any: ...  # type: ignore[override]",
        279: "    def incrby(self, name: _Key, amount: int = ...) -> Any: ...  # type: ignore[override]",
        280: "    def incrbyfloat(self, name: _Key, amount: float = ...) -> Any: ...  # type: ignore[override]",
        281: "    def keys(self, pattern: _Key = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        282: "    def lmove(  # type: ignore[override]",
        285: "    def blmove(  # type: ignore[override]",
        293: "    def mget(self, keys: _Key | Iterable[_Key], *args: _Key) -> Any: ...  # type: ignore[override]",
        294: "    def mset(self, mapping: Mapping[_Key, _Value]) -> Any: ...  # type: ignore[override]",
        295: "    def msetnx(self, mapping: Mapping[_Key, _Value]) -> Any: ...  # type: ignore[override]",
        296: "    def move(self, name: _Key, db: int) -> Any: ...  # type: ignore[override]",
        297: "    def persist(self, name: _Key) -> Any: ...  # type: ignore[override]",
        298: "    def pexpire(  # type: ignore[override]",
        301: "    def pexpireat(  # type: ignore[override]",
        304: "    def psetex(self, name, time_ms, value) -> Any: ...  # type: ignore[override]",
        305: "    def pttl(self, name: _Key) -> Any: ...  # type: ignore[override]",
        306: "    def hrandfield(self, key, count: Incomplete | None = ..., withvalues: bool = ...) -> Any: ...  # type: ignore[override]",
        307: "    def randomkey(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        308: "    def rename(self, src, dst) -> Any: ...  # type: ignore[override]",
        309: "    def renamenx(self, src, dst) -> Any: ...  # type: ignore[override]",
        310: "    def restore(  # type: ignore[override]",
        320: "    def set(  # type: ignore[override]",
        333: "    def setbit(self, name: _Key, offset: int, value: int) -> Any: ...  # type: ignore[override]",
        334: "    def setex(self, name: _Key, time: int | timedelta, value: _Value) -> Any: ...  # type: ignore[override]",
        335: "    def setnx(self, name: _Key, value: _Value) -> Any: ...  # type: ignore[override]",
        336: "    def setrange(self, name, offset, value) -> Any: ...  # type: ignore[override]",
        337: "    def stralgo(  # type: ignore[override]",
        349: "    def strlen(self, name) -> Any: ...  # type: ignore[override]",
        350: "    def substr(self, name, start, end: int = ...) -> Any: ...  # type: ignore[override]",
        351: "    def touch(self, *args) -> Any: ...  # type: ignore[override]",
        352: "    def ttl(self, name: _Key) -> Any: ...  # type: ignore[override]",
        353: "    def type(self, name) -> Any: ...  # type: ignore[override]",
        354: "    def unlink(self, *names: _Key) -> Any: ...  # type: ignore[override]",
        357: "    def pfadd(self, name: _Key, *values: _Value) -> Any: ...  # type: ignore[override]",
        358: "    def pfcount(self, name: _Key) -> Any: ...  # type: ignore[override]",
        359: "    def pfmerge(self, dest: _Key, *sources: _Key) -> Any: ...  # type: ignore[override]",
        362: "    def hdel(self, name: _Key, *keys: _Key) -> Any: ...  # type: ignore[override]",
        363: "    def hexists(self, name: _Key, key: _Key) -> Any: ...  # type: ignore[override]",
        364: "    def hget(self, name: _Key, key: _Key) -> Any: ...  # type: ignore[override]",
        365: "    def hgetall(self, name: _Key) -> Any: ...  # type: ignore[override]",
        366: "    def hincrby(self, name: _Key, key: _Key, amount: int = ...) -> Any: ...  # type: ignore[override]",
        367: "    def hincrbyfloat(self, name: _Key, key: _Key, amount: float = ...) -> Any: ...  # type: ignore[override]",
        368: "    def hkeys(self, name: _Key) -> Any: ...  # type: ignore[override]",
        369: "    def hlen(self, name: _Key) -> Any: ...  # type: ignore[override]",
        371: "    def hset(  # type: ignore[override]",
        375: "    def hset(self, name: _Key, key: None, value: None, mapping: Mapping[_Key, _Value], items: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        377: "    def hset(self, name: _Key, *, mapping: Mapping[_Key, _Value], items: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        378: "    def hsetnx(self, name: _Key, key: _Key, value: _Value) -> Any: ...  # type: ignore[override]",
        379: "    def hmset(self, name: _Key, mapping: Mapping[_Key, _Value]) -> Any: ...  # type: ignore[override]",
        380: "    def hmget(self, name: _Key, keys: _Key | Iterable[_Key], *args: _Key) -> Any: ...  # type: ignore[override]",
        381: "    def hvals(self, name: _Key) -> Any: ...  # type: ignore[override]",
        382: "    def hstrlen(self, name, key) -> Any: ...  # type: ignore[override]",
        385: "    def geoadd(self, name, values, nx: bool = ..., xx: bool = ..., ch: bool = ...) -> Any: ...  # type: ignore[override]",
        386: "    def geodist(self, name, place1, place2, unit: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        387: "    def geohash(self, name, *values) -> Any: ...  # type: ignore[override]",
        388: "    def geopos(self, name, *values) -> Any: ...  # type: ignore[override]",
        389: "    def georadius(  # type: ignore[override]",
        405: "    def georadiusbymember(  # type: ignore[override]",
        420: "    def geosearch(  # type: ignore[override]",
        437: "    def geosearchstore(  # type: ignore[override]",
        456: "    def blpop(self, keys: _Value | Iterable[_Value], timeout: Literal[0] | None = ...) -> Any: ...  # type: ignore[override]",
        458: "    def blpop(self, keys: _Value | Iterable[_Value], timeout: float) -> Any: ...  # type: ignore[override]",
        460: "    def brpop(self, keys: _Value | Iterable[_Value], timeout: Literal[0] | None = ...) -> Any: ...  # type: ignore[override]",
        462: "    def brpop(self, keys: _Value | Iterable[_Value], timeout: float) -> Any: ...  # type: ignore[override]",
        463: "    def brpoplpush(self, src, dst, timeout: int | None = ...) -> Any: ...  # type: ignore[override]",
        464: "    def lindex(self, name: _Key, index: int) -> Any: ...  # type: ignore[override]",
        465: "    def linsert(  # type: ignore[override]",
        468: "    def llen(self, name: _Key) -> Any: ...  # type: ignore[override]",
        469: "    def lpop(self, name, count: int | None = ...) -> Any: ...  # type: ignore[override]",
        470: "    def lpush(self, name: _Value, *values: _Value) -> Any: ...  # type: ignore[override]",
        471: "    def lpushx(self, name, value) -> Any: ...  # type: ignore[override]",
        472: "    def lrange(self, name: _Key, start: int, end: int) -> Any: ...  # type: ignore[override]",
        473: "    def lrem(self, name: _Key, count: int, value: _Value) -> Any: ...  # type: ignore[override]",
        474: "    def lset(self, name: _Key, index: int, value: _Value) -> Any: ...  # type: ignore[override]",
        475: "    def ltrim(self, name: _Key, start: int, end: int) -> Any: ...  # type: ignore[override]",
        476: "    def rpop(self, name, count: int | None = ...) -> Any: ...  # type: ignore[override]",
        477: "    def rpoplpush(self, src, dst) -> Any: ...  # type: ignore[override]",
        478: "    def rpush(self, name: _Value, *values: _Value) -> Any: ...  # type: ignore[override]",
        479: "    def rpushx(self, name, value) -> Any: ...  # type: ignore[override]",
        480: "    def lpos(self, name, value, rank: Incomplete | None = ..., count: Incomplete | None = ..., maxlen: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        481: "    @overload  # type: ignore[override]",
        494: "    @overload  # type: ignore[override]",
        508: "    @overload  # type: ignore[override]",
        523: "    def scan(  # type: ignore[override]",
        531: "    def sscan(self, name: _Key, cursor: int = ..., match: _Key | None = ..., count: int | None = ...) -> Any: ...  # type: ignore[override]",
        532: "    def hscan(self, name: _Key, cursor: int = ..., match: _Key | None = ..., count: int | None = ...) -> Any: ...  # type: ignore[override]",
        533: "    @overload  # type: ignore[override]",
        535: "    @overload  # type: ignore[override]",
        545: "    @overload  # type: ignore[override]",
        551: "    def sadd(self, name: _Key, *values: _Value) -> Any: ...  # type: ignore[override]",
        552: "    def scard(self, name: _Key) -> Any: ...  # type: ignore[override]",
        553: "    def sdiff(self, keys: _Key | Iterable[_Key], *args: _Key) -> Any: ...  # type: ignore[override]",
        554: "    def sdiffstore(self, dest: _Key, keys: _Key | Iterable[_Key], *args: _Key) -> Any: ...  # type: ignore[override]",
        555: "    def sinter(self, keys: _Key | Iterable[_Key], *args: _Key) -> Any: ...  # type: ignore[override]",
        556: "    def sinterstore(self, dest: _Key, keys: _Key | Iterable[_Key], *args: _Key) -> Any: ...  # type: ignore[override]",
        557: "    def sismember(self, name: _Key, value: _Value) -> Any: ...  # type: ignore[override]",
        558: "    def smembers(self, name: _Key) -> Any: ...  # type: ignore[override]",
        559: "    def smismember(self, name, values, *args) -> Any: ...  # type: ignore[override]",
        560: "    def smove(self, src: _Key, dst: _Key, value: _Value) -> Any: ...  # type: ignore[override]",
        561: "    @overload  # type: ignore[override]",
        563: "    @overload  # type: ignore[override]",
        565: "    @overload  # type: ignore[override]",
        567: "    @overload  # type: ignore[override]",
        569: "    def srem(self, name: _Key, *values: _Value) -> Any: ...  # type: ignore[override]",
        570: "    def sunion(self, keys: _Key | Iterable[_Key], *args: _Key) -> Any: ...  # type: ignore[override]",
        571: "    def sunionstore(self, dest: _Key, keys: _Key | Iterable[_Key], *args: _Key) -> Any: ...  # type: ignore[override]",
        574: "    def xack(self, name, groupname, *ids) -> Any: ...  # type: ignore[override]",
        575: "    def xadd(  # type: ignore[override]",
        586: "    def xautoclaim(  # type: ignore[override]",
        596: "    def xclaim(  # type: ignore[override]",
        599: "    def xdel(self, name, *ids) -> Any: ...  # type: ignore[override]",
        600: "    def xgroup_create(self, name, groupname, id: str = ..., mkstream: bool = ..., entries_read: int | None = ...) -> Any: ...  # type: ignore[override]",
        601: "    def xgroup_delconsumer(self, name, groupname, consumername) -> Any: ...  # type: ignore[override]",
        602: "    def xgroup_destroy(self, name, groupname) -> Any: ...  # type: ignore[override]",
        603: "    def xgroup_createconsumer(self, name, groupname, consumername) -> Any: ...  # type: ignore[override]",
        604: "    def xgroup_setid(self, name, groupname, id, entries_read: int | None = ...) -> Any: ...  # type: ignore[override]",
        605: "    def xinfo_consumers(self, name, groupname) -> Any: ...  # type: ignore[override]",
        606: "    def xinfo_groups(self, name) -> Any: ...  # type: ignore[override]",
        607: "    def xinfo_stream(self, name, full: bool = ...) -> Any: ...  # type: ignore[override]",
        608: "    def xlen(self, name: _Key) -> Any: ...  # type: ignore[override]",
        609: "    def xpending(self, name, groupname) -> Any: ...  # type: ignore[override]",
        610: "    def xpending_range(  # type: ignore[override]",
        613: "    def xrange(self, name, min: str = ..., max: str = ..., count: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        614: "    def xread(self, streams, count: Incomplete | None = ..., block: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        615: "    def xreadgroup(  # type: ignore[override]",
        618: "    def xrevrange(self, name, max: str = ..., min: str = ..., count: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        619: "    def xtrim(  # type: ignore[override]",
        624: "    def zadd(  # type: ignore[override]",
        635: "    def zcard(self, name: _Key) -> Any: ...  # type: ignore[override]",
        636: "    def zcount(self, name: _Key, min: _Value, max: _Value) -> Any: ...  # type: ignore[override]",
        637: "    def zdiff(self, keys, withscores: bool = ...) -> Any: ...  # type: ignore[override]",
        638: "    def zdiffstore(self, dest, keys) -> Any: ...  # type: ignore[override]",
        639: "    def zincrby(self, name: _Key, amount: float, value: _Value) -> Any: ...  # type: ignore[override]",
        640: "    def zinter(self, keys, aggregate: Incomplete | None = ..., withscores: bool = ...) -> Any: ...  # type: ignore[override]",
        641: '    def zinterstore(self, dest: _Key, keys: Iterable[_Key], aggregate: Literal["SUM", "MIN", "MAX"] | None = ...) -> Any: ...  # type: ignore[override]',
        642: "    def zlexcount(self, name: _Key, min: _Value, max: _Value) -> Any: ...  # type: ignore[override]",
        643: "    def zpopmax(self, name: _Key, count: int | None = ...) -> Any: ...  # type: ignore[override]",
        644: "    def zpopmin(self, name: _Key, count: int | None = ...) -> Any: ...  # type: ignore[override]",
        645: "    def zrandmember(self, key, count: Incomplete | None = ..., withscores: bool = ...) -> Any: ...  # type: ignore[override]",
        646: "    @overload  # type: ignore[override]",
        648: "    @overload  # type: ignore[override]",
        650: "    @overload  # type: ignore[override]",
        652: "    @overload  # type: ignore[override]",
        654: "    @overload  # type: ignore[override]",
        668: "    @overload  # type: ignore[override]",
        682: "    @overload  # type: ignore[override]",
        696: "    @overload  # type: ignore[override]",
        710: "    @overload  # type: ignore[override]",
        724: "    @overload  # type: ignore[override]",
        728: "    @overload  # type: ignore[override]",
        730: "    @overload  # type: ignore[override]",
        734: "    def zrangestore(  # type: ignore[override]",
        746: "    def zrangebylex(self, name: _Key, min: _Value, max: _Value, start: int | None = ..., num: int | None = ...) -> Any: ...  # type: ignore[override]",
        747: "    def zrevrangebylex(self, name: _Key, max: _Value, min: _Value, start: int | None = ..., num: int | None = ...) -> Any: ...  # type: ignore[override]",
        748: "    @overload  # type: ignore[override]",
        760: "    @overload  # type: ignore[override]",
        764: "    @overload  # type: ignore[override]",
        775: "    @overload  # type: ignore[override]",
        787: "    @overload  # type: ignore[override]",
        791: "    @overload  # type: ignore[override]",
        802: "    def zrank(self, name: _Key, value: _Value) -> Any: ...  # type: ignore[override]",
        803: "    def zrem(self, name: _Key, *values: _Value) -> Any: ...  # type: ignore[override]",
        804: "    def zremrangebylex(self, name: _Key, min: _Value, max: _Value) -> Any: ...  # type: ignore[override]",
        805: "    def zremrangebyrank(self, name: _Key, min: int, max: int) -> Any: ...  # type: ignore[override]",
        806: "    def zremrangebyscore(self, name: _Key, min: _Value, max: _Value) -> Any: ...  # type: ignore[override]",
        807: "    def zrevrank(self, name: _Key, value: _Value) -> Any: ...  # type: ignore[override]",
        808: "    def zscore(self, name: _Key, value: _Value) -> Any: ...  # type: ignore[override]",
        809: "    def zunion(self, keys, aggregate: Incomplete | None = ..., withscores: bool = ...) -> Any: ...  # type: ignore[override]",
        810: '    def zunionstore(self, dest: _Key, keys: Iterable[_Key], aggregate: Literal["SUM", "MIN", "MAX"] | None = ...) -> Any: ...  # type: ignore[override]',
        811: "    def zmscore(self, key, members) -> Any: ...  # type: ignore[override]",
        814: "    def bgrewriteaof(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        815: "    def bgsave(self, schedule: bool = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        816: "    def role(self) -> Any: ...  # type: ignore[override]",
        817: "    def client_kill(self, address: str, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        818: "    def client_kill_filter(  # type: ignore[override]",
        828: "    def client_info(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        829: "    def client_list(self, _type: str | None = ..., client_id: list[str] = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        830: "    def client_getname(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        831: "    def client_getredir(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        832: "    def client_reply(self, reply, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        833: "    def client_id(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        834: "    def client_tracking_on(  # type: ignore[override]",
        843: "    def client_tracking_off(  # type: ignore[override]",
        852: "    def client_tracking(  # type: ignore[override]",
        863: "    def client_trackinginfo(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        864: "    def client_setname(self, name: str, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        865: "    def client_unblock(self, client_id, error: bool = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        866: "    def client_pause(self, timeout, all: bool = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        867: "    def client_unpause(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        868: "    def command(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        869: "    def command_info(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        870: "    def command_count(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        871: "    def config_get(self, pattern: PatternT = ..., *args: PatternT, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        872: "    def config_set(self, name: KeyT, value: EncodableT, *args: KeyT | EncodableT, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        873: "    def config_resetstat(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        874: "    def config_rewrite(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        875: "    def dbsize(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        876: "    def debug_object(self, key, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        877: "    def debug_segfault(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        878: "    def echo(self, value: _Value, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        879: "    def flushall(self, asynchronous: bool = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        880: "    def flushdb(self, asynchronous: bool = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        881: "    def sync(self) -> Any: ...  # type: ignore[override]",
        882: "    def psync(self, replicationid, offset) -> Any: ...  # type: ignore[override]",
        883: "    def swapdb(self, first, second, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        884: "    def select(self, index, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        885: "    def info(self, section: _Key | None = ..., *args: _Key, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        886: "    def lastsave(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        887: "    def lolwut(self, *version_numbers: _Value, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        888: "    def migrate(  # type: ignore[override]",
        900: "    def object(self, infotype, key, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        901: "    def memory_doctor(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        902: "    def memory_help(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        903: "    def memory_stats(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        904: "    def memory_malloc_stats(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        905: "    def memory_usage(self, key, samples: Incomplete | None = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        906: "    def memory_purge(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        907: "    def ping(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        908: "    def quit(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        909: "    def replicaof(self, *args, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        910: "    def save(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        911: "    def shutdown(  # type: ignore[override]",
        920: "    def slaveof(self, host: Incomplete | None = ..., port: Incomplete | None = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        921: "    def slowlog_get(self, num: Incomplete | None = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        922: "    def slowlog_len(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        923: "    def slowlog_reset(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        924: "    def time(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        925: "    def wait(self, num_replicas, timeout, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        928: "    def module_load(self, path, *args) -> Any: ...  # type: ignore[override]",
        929: "    def module_unload(self, name) -> Any: ...  # type: ignore[override]",
        930: "    def module_list(self) -> Any: ...  # type: ignore[override]",
        931: "    def command_getkeys(self, *args) -> Any: ...  # type: ignore[override]",
        934: "    def publish(self, channel: _Key, message: _Key, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        935: "    def pubsub_channels(self, pattern: _Key = ..., **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        936: "    def pubsub_numpat(self, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        937: "    def pubsub_numsub(self, *args: _Key, **kwargs: _CommandOptions) -> Any: ...  # type: ignore[override]",
        940: "    def eval(self, script, numkeys, *keys_and_args) -> Any: ...  # type: ignore[override]",
        941: "    def evalsha(self, sha, numkeys, *keys_and_args) -> Any: ...  # type: ignore[override]",
        942: "    def script_exists(self, *args) -> Any: ...  # type: ignore[override]",
        943: "    def script_debug(self, *args) -> Any: ...  # type: ignore[override]",
        944: "    def script_flush(self, sync_type: Incomplete | None = ...) -> Any: ...  # type: ignore[override]",
        945: "    def script_kill(self) -> Any: ...  # type: ignore[override]",
        946: "    def script_load(self, script) -> Any: ...  # type: ignore[override]",
        947: "    def register_script(self, script: str | _StrType) -> Any: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/redis/redis/commands/core.pyi"): {
        1448: "    def register_script(self, script: ScriptTextT) -> AsyncScript: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/redis/redis/commands/json/__init__.pyi"): {
        14: "class Pipeline(JSONCommands, ClientPipeline[Incomplete]): ...  # type: ignore[misc]"
    },
    WindowsPath("stubs/redis/redis/commands/timeseries/__init__.pyi"): {
        13: "class Pipeline(TimeSeriesCommands, ClientPipeline[Incomplete]): ...  # type: ignore[misc]"
    },
    WindowsPath("stubs/requests/requests/structures.pyi"): {
        19: "    def __getitem__(self, key: str) -> _VT | None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/setuptools/setuptools/command/develop.pyi"): {
        11: "    def run(self) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/setuptools/setuptools/command/test.pyi"): {
        13: "    def loadTestsFromModule(self, module: ModuleType, pattern: Incomplete | None = ...) -> list[TestSuite]: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/setuptools/setuptools/command/upload_docs.pyi"): {
        17: "    def upload_file(self, filename) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/firebird/base.pyi"): {
        54: "    def visit_alias(self, alias, asfrom: bool = ..., **kwargs): ...  # type: ignore[override]",
        99: "    def has_table(self, connection, table_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
        100: "    def has_sequence(self, connection, sequence_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/mssql/base.pyi"): {
        223: "    def visit_table(self, table, mssql_aliased: bool = ..., iscrud: bool = ..., **kwargs): ...  # type: ignore[override]",
        225: "    def visit_column(self, column, add_to_result_map: Incomplete | None = ..., **kw): ...  # type: ignore[override]",
        253: "    def visit_create_index(self, create, include_schema: bool = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/mysql/base.pyi"): {
        216: "    def has_table(self, connection, table_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
        217: "    def has_sequence(self, connection, sequence_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/mysql/enumerated.pyi"): {
        5: "class ENUM(sqltypes.NativeForEmulated, sqltypes.Enum, _StringType):  # type: ignore[misc]  # incompatible with base class"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/mysql/oursql.pyi"): {
        29: "    def has_table(self, connection, table_name, schema: Incomplete | None = ...): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/mysql/types.pyi"): {
        37: "class _MatchType(sqltypes.Float, sqltypes.MatchType):  # type: ignore[misc]  # incompatible with base class"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/oracle/base.pyi"): {
        117: "    def visit_join(self, join, from_linter: Incomplete | None = ..., **kwargs): ...  # type: ignore[override]",
        195: "    def has_table(self, connection, table_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
        196: "    def has_sequence(self, connection, sequence_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/postgresql/base.pyi"): {
        104: "class ENUM(sqltypes.NativeForEmulated, sqltypes.Enum):  # type: ignore[misc]  # base classes incompatible",
        294: "    def has_table(self, connection, table_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
        295: "    def has_sequence(self, connection, sequence_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/sqlite/base.pyi"): {
        80: "    def visit_create_index(self, create, include_schema: bool = ..., include_table_schema: bool = ...): ...  # type: ignore[override]",
        134: "    def has_table(self, connection, table_name, schema: Incomplete | None = ...): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/dialects/sybase/base.pyi"): {
        135: "    def has_table(self, connection, table_name, schema: Incomplete | None = ...): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/engine/base.pyi"): {
        59: "    def connect(self, close_with_result: bool = ...): ...  # type: ignore[override]",
        78: "    @overload  # type: ignore[override]",
        191: "    @overload  # type: ignore[override]",
        195: "    @overload  # type: ignore[override]",
        199: "    def connect(self, close_with_result: bool = ...) -> Connection: ...  # type: ignore[override]",
        214: "class OptionEngine(OptionEngineMixin, Engine): ...  # type: ignore[misc]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/engine/create.pyi"): {
        12: 'def create_engine(url: URL | str, *, strategy: Literal["mock"], **kwargs) -> MockConnection: ...  # type: ignore[misc]'
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/engine/default.pyi"): {
        15: "class DefaultDialect(interfaces.Dialect):  # type: ignore[misc]",
        135: "    def do_execute_no_params(self, cursor, statement, context: Incomplete | None = ...) -> None: ...  # type: ignore[override]",
        149: "class StrCompileDialect(DefaultDialect):  # type: ignore[misc]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/engine/mock.pyi"): {
        13: "    def engine(self) -> Self: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/ext/associationproxy.pyi"): {
        80: "    def __eq__(self, other) -> ColumnOperators[Any]: ...  # type: ignore[override]",
        174: "    def __ior__(self, other): ...  # type: ignore[misc]",
        180: "    def __isub__(self, other): ...  # type: ignore[misc]",
        184: "    def __iand__(self, other): ...  # type: ignore[misc]",
        188: "    def __ixor__(self, other): ...  # type: ignore[misc]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/ext/horizontal_shard.pyi"): {
        32: "    def get_bind(self, mapper: Incomplete | None = ..., shard_id: Incomplete | None = ..., instance: Incomplete | None = ..., clause: Incomplete | None = ..., **kw): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/ext/mutable.pyi"): {
        38: "    def __iadd__(self, x): ...  # type: ignore[misc]",
        52: "    def __ior__(self, other): ...  # type: ignore[misc]",
        53: "    def __iand__(self, other): ...  # type: ignore[misc]",
        54: "    def __ixor__(self, other): ...  # type: ignore[misc]",
        55: "    def __isub__(self, other): ...  # type: ignore[misc]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/ext/orderinglist.pyi"): {
        16: "    def pop(self, index: int = ...): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/future/engine.pyi"): {
        12: 'def create_engine(url: URL | str, *, strategy: Literal["mock"], **kwargs) -> MockConnection: ...  # type: ignore[misc]',
        24: "    def execute(self, statement, parameters: Incomplete | None = ..., execution_options: Incomplete | None = ...): ...  # type: ignore[override]",
        25: "    def scalar(self, statement, parameters: Incomplete | None = ..., execution_options: Incomplete | None = ...): ...  # type: ignore[override]",
        34: "    def begin(self) -> None: ...  # type: ignore[override]",
        37: "class OptionEngine(OptionEngineMixin, Engine): ...  # type: ignore[misc]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/orm/context.pyi"): {
        48: "    def create_for_statement(cls, statement_container, compiler, **kw) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/orm/descriptor_props.pyi"): {
        40: "        __hash__: ClassVar[None]  # type: ignore[assignment]",
        46: "        def __eq__(self, other) -> ColumnOperators[_T]: ...  # type: ignore[override]",
        47: "        def __ne__(self, other) -> ColumnOperators[_T]: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/orm/instrumentation.pyi"): {
        27: "    def __hash__(self) -> int: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/orm/path_registry.pyi"): {
        103: "class CachingEntityRegistry(AbstractEntityRegistry, dict[Incomplete, Incomplete]):  # type: ignore[misc]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/orm/query.pyi"): {
        98: "    def scalar(self) -> Any: ...  # type: ignore[override]",
        115: "    def get_children(self, **kw) -> None: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/orm/relationships.pyi"): {
        109: "        __hash__: ClassVar[None]  # type: ignore[assignment]",
        114: "        def __ne__(self, other) -> ColumnOperators[_T]: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/orm/session.pyi"): {
        163: "    def query(self, entities: ColumnElement[_T], **kwargs: Any) -> Query[tuple[_T]]: ...  # type: ignore[misc]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/orm/strategies.pyi"): {
        19: "    def setup_query(self, compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, check_for_adapt: bool = ..., **kwargs) -> None: ...  # type: ignore[override]",
        27: "    def setup_query(self, compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, **kwargs) -> None: ...  # type: ignore[override]",
        41: "    def setup_query(self, compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, only_load_props: Incomplete | None = ..., **kw) -> None: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/base.pyi"): {
        137: "    __hash__: ClassVar[None]  # type: ignore[assignment]",
        160: "    def __hash__(self) -> int: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/compiler.pyi"): {
        138: "    def construct_params(self, params: Incomplete | None = ..., _group_number: Incomplete | None = ..., _check: bool = ..., extracted_parameters: Incomplete | None = ..., escape_names: bool = ...): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/crud.pyi"): {
        17: "    def __eq__(self, other) -> ColumnOperators[_T]: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/ddl.pyi"): {
        14: "    def execute(self, bind: Incomplete | None = ..., target: Incomplete | None = ...): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/elements.pyi"): {
        411: "    def get_children(self, column_tables: bool = ..., **kw): ...  # type: ignore[override]"
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/functions.pyi"): {
        11: "class FunctionElement(Executable, ColumnElement[Any], FromClause, Generative):  # type: ignore[misc]",
        35: "    def alias(self, name: str | None = ..., joins_implicitly: bool = ...) -> TableValuedAlias: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/operators.pyi"): {
        44: "    def __eq__(self, other: _T | ColumnOperators[_T] | None) -> ColumnOperators[_T]: ...  # type: ignore[override]",
        45: "    def __ne__(self, other: _T | ColumnOperators[_T] | None) -> ColumnOperators[_T]: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/schema.pyi"): {
        32: "    def append_column(self, column, replace_existing: bool = ...) -> None: ...  # type: ignore[override]",
        110: "    def execute(self, bind: Incomplete | None = ...): ...  # type: ignore[override]",
        281: "    def copy(self, schema: Incomplete | None = ..., target_table: Incomplete | None = ..., **kw): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/selectable.pyi"): {
        120: "    def alias(self, name: Incomplete | None = ...): ...  # type: ignore[override]",
        194: "    def alias(self, name: Incomplete | None, **kw) -> Self: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/sql/sqltypes.pyi"): {
        201: "class Boolean(Emulated, TypeEngine, SchemaType):  # type: ignore[misc]",
        216: "class Interval(Emulated, _AbstractInterval, TypeDecorator):  # type: ignore[misc]",
        260: "    @property  # type: ignore[override]",
    },
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/testing/engines.pyi"): {46: "def testing_engine(  # type: ignore[misc]"},
    WindowsPath("stubs/SQLAlchemy/sqlalchemy/util/_collections.pyi"): {
        36: "    def copy(self) -> None: ...  # type: ignore[override]",
        85: "    def update(self, iterable: Iterable[_T]) -> Self: ...  # type: ignore[override]",
        86: "    __ior__ = update  # type: ignore[assignment]",
        87: "    def union(self, other: Iterable[_S]) -> OrderedSet[_S | _T]: ...  # type: ignore[override]",
        88: "    __or__ = union  # type: ignore[assignment]  # pyright: ignore[reportGeneralTypeIssues]",
        89: "    def intersection(self, other: Iterable[Any]) -> Self: ...  # type: ignore[override]",
        92: "    __xor__ = symmetric_difference  # type: ignore[assignment]  # pyright: ignore[reportGeneralTypeIssues]",
        93: "    def difference(self, other: Iterable[Any]) -> Self: ...  # type: ignore[override]",
        95: "    def intersection_update(self, other: Iterable[Any]) -> Self: ...  # type: ignore[override]",
        96: "    __iand__ = intersection_update  # type: ignore[assignment]",
        97: "    def symmetric_difference_update(self, other: Iterable[_T]) -> Self: ...  # type: ignore[override]",
        98: "    __ixor__ = symmetric_difference_update  # type: ignore[assignment]",
        99: "    def difference_update(self, other: Iterable[Any]) -> Self: ...  # type: ignore[override]",
        100: "    __isub__ = difference_update  # type: ignore[assignment]",
    },
    WindowsPath("stubs/stripe/stripe/api_resources/application_fee_refund.pyi"): {
        10: "    def modify(cls, fee, sid: str, **params) -> Self: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/tensorflow/tensorflow/__init__.pyi"): {
        104: "    def __eq__(self, other: _TensorCompatible) -> Tensor: ...  # type: ignore[override]",
        105: "    def __ne__(self, other: _TensorCompatible) -> Tensor: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/tqdm/tqdm/notebook.pyi"): {94: "    def update(self, n: int = ...): ...  # type: ignore[override]"},
    WindowsPath("stubs/tqdm/tqdm/utils.pyi"): {
        24: "    def __eq__(self, other: _Has__Comparable) -> bool: ...  # type: ignore[override]",
        25: "    def __ne__(self, other: _Has__Comparable) -> bool: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/tqdm/tqdm/contrib/logging.pyi"): {
        20: "def tqdm_logging_redirect(*args, **kwargs) -> _GeneratorContextManager[std_tqdm[Incomplete]]: ...  # type: ignore[misc]"
    },
    WindowsPath("stubs/tqdm/tqdm/contrib/slack.pyi"): {
        86: "    def display(self, *, msg: str | None = ..., pos: int | None = ..., close: bool = ..., bar_style: Incomplete = ..., check_delay: bool = ...) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/tqdm/tqdm/contrib/telegram.pyi"): {
        91: "    def display(self, *, msg: str | None = ..., pos: int | None = ..., close: bool = ..., bar_style: Incomplete = ..., check_delay: bool = ...) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/tree-sitter/tree_sitter/binding.pyi"): {52: "    __hash__: ClassVar[None]  # type: ignore[assignment]"},
    WindowsPath("stubs/ttkthemes/ttkthemes/themed_style.pyi"): {
        10: "    def theme_use(self, theme_name: str | None = ...) -> str: ...  # type: ignore[override]",
        11: "    def theme_names(self) -> list[str]: ...  # type: ignore[override]",
    },
    WindowsPath("stubs/ttkthemes/ttkthemes/themed_tk.pyi"): {
        25: "    def config(self, kw: Incomplete | None = ..., **kwargs): ...  # type: ignore[override]",
        27: "    def configure(self, kw: Incomplete | None = ..., **kwargs): ...  # type: ignore[override]",
    },
    WindowsPath("stubs/vobject/vobject/icalendar.pyi"): {
        39: "    def prettyPrint(self, level, tabwidth) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/vobject/vobject/vcard.pyi"): {
        81: "    def serialize(cls, obj, buf, lineLength, validate) -> None: ...  # type: ignore[override]"
    },
    WindowsPath("stubs/waitress/waitress/wasyncore.pyi"): {
        76: "    def send(self, data: bytes) -> None: ...  # type: ignore[override]"
    },
}
