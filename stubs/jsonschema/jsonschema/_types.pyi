from _typeshed import Unused
from collections.abc import Callable, Iterable, Mapping
from typing import Literal

def is_array(checker: Unused, instance: object) -> bool: ...
def is_bool(checker: Unused, instance: object) -> bool: ...
def is_integer(checker: Unused, instance: object) -> bool: ...
def is_null(checker: Unused, instance: object) -> bool: ...
def is_number(checker: Unused, instance: object) -> bool: ...
def is_object(checker: Unused, instance: object) -> bool: ...
def is_string(checker: Unused, instance: object) -> bool: ...
def is_any(checker: Unused, instance: Unused) -> Literal[True]: ...

class TypeChecker:
    """
    A :kw:`type` property checker.

    A `TypeChecker` performs type checking for a `Validator`, converting
    between the defined JSON Schema types and some associated Python types or
    objects.

    Modifying the behavior just mentioned by redefining which Python objects
    are considered to be of which JSON Schema types can be done using
    `TypeChecker.redefine` or `TypeChecker.redefine_many`, and types can be
    removed via `TypeChecker.remove`. Each of these return a new `TypeChecker`.

    Arguments:

        type_checkers:

            The initial mapping of types to their checking functions.

    """

    def __init__(self, type_checkers: Mapping[str, Callable[[object], bool]] = ...) -> None:
        """Method generated by attrs for class TypeChecker."""

    def is_type(self, instance, type: str) -> bool:
        """
        Check if the instance is of the appropriate type.

        Arguments:

            instance:

                The instance to check

            type:

                The name of the type that is expected.

        Raises:

            `jsonschema.exceptions.UndefinedTypeCheck`:

                if ``type`` is unknown to this object.

        """

    def redefine(self, type: str, fn: Callable[..., bool]) -> TypeChecker:
        """
        Produce a new checker with the given type redefined.

        Arguments:

            type:

                The name of the type to check.

            fn (collections.abc.Callable):

                A callable taking exactly two parameters - the type
                checker calling the function and the instance to check.
                The function should return true if instance is of this
                type and false otherwise.

        """

    def redefine_many(self, definitions=()) -> TypeChecker:
        """
        Produce a new checker with the given types redefined.

        Arguments:

            definitions (dict):

                A dictionary mapping types to their checking functions.

        """

    def remove(self, *types: Iterable[str]) -> TypeChecker:
        """
        Produce a new checker with the given types forgotten.

        Arguments:

            types:

                the names of the types to remove.

        Raises:

            `jsonschema.exceptions.UndefinedTypeCheck`:

                if any given type is unknown to this object

        """

draft3_type_checker: TypeChecker
draft4_type_checker: TypeChecker
draft6_type_checker: TypeChecker
draft7_type_checker: TypeChecker
draft201909_type_checker: TypeChecker
draft202012_type_checker: TypeChecker
